
STM32F429ZI_NUCLEO_144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08002440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          00000084  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20000104  20000104  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d3cc  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001f88  00000000  00000000  0002d47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    00005e54  00000000  00000000  0002f404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  000358d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bb9  00000000  00000000  00036088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5e9  00000000  00000000  0005bc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e35f9  00000000  00000000  0006822a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001868  00000000  00000000  0014b878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080022ec 	.word	0x080022ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080022ec 	.word	0x080022ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <BSP_LED_Init+0x68>)
 800058c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800058e:	4604      	mov	r4, r0
 8000590:	bb08      	cbnz	r0, 80005d6 <BSP_LED_Init+0x4e>
 8000592:	9001      	str	r0, [sp, #4]
 8000594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000596:	f042 0202 	orr.w	r2, r2, #2
 800059a:	631a      	str	r2, [r3, #48]	; 0x30
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005a8:	4d13      	ldr	r5, [pc, #76]	; (80005f8 <BSP_LED_Init+0x70>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005aa:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005ae:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005b2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2700      	movs	r7, #0
 80005b6:	2301      	movs	r3, #1
 80005b8:	e9cd 3704 	strd	r3, r7, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005bc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005be:	2302      	movs	r3, #2
 80005c0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005c2:	f000 f8f5 	bl	80007b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005c6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80005ca:	463a      	mov	r2, r7
 80005cc:	4631      	mov	r1, r6
 80005ce:	f000 f9d5 	bl	800097c <HAL_GPIO_WritePin>
}
 80005d2:	b009      	add	sp, #36	; 0x24
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80005d6:	2200      	movs	r2, #0
 80005d8:	9202      	str	r2, [sp, #8]
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	f042 0202 	orr.w	r2, r2, #2
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	9302      	str	r3, [sp, #8]
 80005ea:	9b02      	ldr	r3, [sp, #8]
 80005ec:	e7db      	b.n	80005a6 <BSP_LED_Init+0x1e>
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	08002304 	.word	0x08002304
 80005f8:	20000000 	.word	0x20000000

080005fc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <BSP_LED_On+0x14>)
 80005fe:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <BSP_LED_On+0x18>)
 8000604:	2201      	movs	r2, #1
 8000606:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800060a:	f000 b9b7 	b.w	800097c <HAL_GPIO_WritePin>
 800060e:	bf00      	nop
 8000610:	08002304 	.word	0x08002304
 8000614:	20000000 	.word	0x20000000

08000618 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000618:	490f      	ldr	r1, [pc, #60]	; (8000658 <SystemInit+0x40>)
 800061a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800061e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <SystemInit+0x44>)
 8000628:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800062c:	f042 0201 	orr.w	r2, r2, #1
 8000630:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000632:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800063a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800063e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <SystemInit+0x48>)
 8000642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800064a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800064c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800064e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000652:	608b      	str	r3, [r1, #8]
#endif
}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00
 800065c:	40023800 	.word	0x40023800
 8000660:	24003010 	.word	0x24003010

08000664 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000664:	4770      	bx	lr
	...

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_InitTick+0x3c>)
 800066c:	4e0e      	ldr	r6, [pc, #56]	; (80006a8 <HAL_InitTick+0x40>)
{
 800066e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	7830      	ldrb	r0, [r6, #0]
 8000676:	fbb3 f3f0 	udiv	r3, r3, r0
 800067a:	6810      	ldr	r0, [r2, #0]
 800067c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000680:	f000 f880 	bl	8000784 <HAL_SYSTICK_Config>
 8000684:	4604      	mov	r4, r0
 8000686:	b950      	cbnz	r0, 800069e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000688:	2d0f      	cmp	r5, #15
 800068a:	d808      	bhi.n	800069e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	4602      	mov	r2, r0
 800068e:	4629      	mov	r1, r5
 8000690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000694:	f000 f844 	bl	8000720 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000698:	6075      	str	r5, [r6, #4]
 800069a:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800069c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800069e:	2001      	movs	r0, #1
 80006a0:	e7fc      	b.n	800069c <HAL_InitTick+0x34>
 80006a2:	bf00      	nop
 80006a4:	20000010 	.word	0x20000010
 80006a8:	20000014 	.word	0x20000014

080006ac <HAL_Init>:
{
 80006ac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_Init+0x28>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f81b 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c6:	200f      	movs	r0, #15
 80006c8:	f7ff ffce 	bl	8000668 <HAL_InitTick>
  HAL_MspInit();
 80006cc:	f7ff ffca 	bl	8000664 <HAL_MspInit>
}
 80006d0:	2000      	movs	r0, #0
 80006d2:	bd08      	pop	{r3, pc}
 80006d4:	40023c00 	.word	0x40023c00

080006d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_IncTick+0x10>)
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <HAL_IncTick+0x14>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	440b      	add	r3, r1
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	20000014 	.word	0x20000014

080006f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006f0:	4b01      	ldr	r3, [pc, #4]	; (80006f8 <HAL_GetTick+0x8>)
 80006f2:	6818      	ldr	r0, [r3, #0]
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200000ac 	.word	0x200000ac

080006fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4907      	ldr	r1, [pc, #28]	; (800071c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006fe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000718:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	68dc      	ldr	r4, [r3, #12]
 8000726:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	2d04      	cmp	r5, #4
 8000732:	bf28      	it	cs
 8000734:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000736:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073c:	bf8c      	ite	hi
 800073e:	3c03      	subhi	r4, #3
 8000740:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000742:	fa03 f505 	lsl.w	r5, r3, r5
 8000746:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074a:	40a3      	lsls	r3, r4
 800074c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000752:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	bfac      	ite	ge
 800075a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	4a08      	ldrlt	r2, [pc, #32]	; (8000780 <HAL_NVIC_SetPriority+0x60>)
 8000760:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000764:	bfb8      	it	lt
 8000766:	f000 000f 	andlt.w	r0, r0, #15
 800076a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	bfaa      	itet	ge
 800076e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	e000ed14 	.word	0xe000ed14

08000784 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	3801      	subs	r0, #1
 8000786:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800078a:	d20a      	bcs.n	80007a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000790:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	21f0      	movs	r1, #240	; 0xf0
 8000794:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8000978 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007b8:	4a6d      	ldr	r2, [pc, #436]	; (8000970 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ba:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007bc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80007be:	2401      	movs	r4, #1
 80007c0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80007c6:	43ac      	bics	r4, r5
 80007c8:	f040 80b9 	bne.w	800093e <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007cc:	684d      	ldr	r5, [r1, #4]
 80007ce:	f005 0403 	and.w	r4, r5, #3
 80007d2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80007d6:	2603      	movs	r6, #3
 80007d8:	1e67      	subs	r7, r4, #1
 80007da:	fa06 f608 	lsl.w	r6, r6, r8
 80007de:	2f01      	cmp	r7, #1
 80007e0:	ea6f 0606 	mvn.w	r6, r6
 80007e4:	d834      	bhi.n	8000850 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80007e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ec:	68cf      	ldr	r7, [r1, #12]
 80007ee:	fa07 f708 	lsl.w	r7, r7, r8
 80007f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80007f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007fa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007fe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000802:	409f      	lsls	r7, r3
 8000804:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000808:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800080a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800080c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000810:	688f      	ldr	r7, [r1, #8]
 8000812:	fa07 f708 	lsl.w	r7, r7, r8
 8000816:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800081a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800081c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800081e:	d119      	bne.n	8000854 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000820:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000824:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000828:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800082c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000830:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000834:	f04f 0e0f 	mov.w	lr, #15
 8000838:	fa0e fe0b 	lsl.w	lr, lr, fp
 800083c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000840:	690f      	ldr	r7, [r1, #16]
 8000842:	fa07 f70b 	lsl.w	r7, r7, fp
 8000846:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800084a:	f8ca 7020 	str.w	r7, [sl, #32]
 800084e:	e001      	b.n	8000854 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000850:	2c03      	cmp	r4, #3
 8000852:	d1da      	bne.n	800080a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000854:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000856:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800085a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800085c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800085e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000862:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000864:	d06b      	beq.n	800093e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	f04f 0a00 	mov.w	sl, #0
 800086a:	f8cd a004 	str.w	sl, [sp, #4]
 800086e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000872:	4c40      	ldr	r4, [pc, #256]	; (8000974 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000874:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000878:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800087c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000880:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000884:	9601      	str	r6, [sp, #4]
 8000886:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000888:	f023 0603 	bic.w	r6, r3, #3
 800088c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000890:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000894:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000898:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800089c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008a0:	270f      	movs	r7, #15
 80008a2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008a8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ac:	d04e      	beq.n	800094c <HAL_GPIO_Init+0x19c>
 80008ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008b2:	42a0      	cmp	r0, r4
 80008b4:	d04c      	beq.n	8000950 <HAL_GPIO_Init+0x1a0>
 80008b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ba:	42a0      	cmp	r0, r4
 80008bc:	d04a      	beq.n	8000954 <HAL_GPIO_Init+0x1a4>
 80008be:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008c2:	42a0      	cmp	r0, r4
 80008c4:	d048      	beq.n	8000958 <HAL_GPIO_Init+0x1a8>
 80008c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ca:	42a0      	cmp	r0, r4
 80008cc:	d046      	beq.n	800095c <HAL_GPIO_Init+0x1ac>
 80008ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008d2:	42a0      	cmp	r0, r4
 80008d4:	d044      	beq.n	8000960 <HAL_GPIO_Init+0x1b0>
 80008d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008da:	42a0      	cmp	r0, r4
 80008dc:	d042      	beq.n	8000964 <HAL_GPIO_Init+0x1b4>
 80008de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008e2:	42a0      	cmp	r0, r4
 80008e4:	d040      	beq.n	8000968 <HAL_GPIO_Init+0x1b8>
 80008e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ea:	42a0      	cmp	r0, r4
 80008ec:	d03e      	beq.n	800096c <HAL_GPIO_Init+0x1bc>
 80008ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008f2:	42a0      	cmp	r0, r4
 80008f4:	bf0c      	ite	eq
 80008f6:	2409      	moveq	r4, #9
 80008f8:	240a      	movne	r4, #10
 80008fa:	fa04 f40e 	lsl.w	r4, r4, lr
 80008fe:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000900:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8000902:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000904:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000908:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800090a:	bf54      	ite	pl
 800090c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800090e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000912:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8000914:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000916:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000918:	bf54      	ite	pl
 800091a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800091c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000920:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000922:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000924:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000926:	bf54      	ite	pl
 8000928:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800092a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800092e:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000930:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000932:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000934:	bf54      	ite	pl
 8000936:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000938:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800093c:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800093e:	3301      	adds	r3, #1
 8000940:	2b10      	cmp	r3, #16
 8000942:	f47f af3b 	bne.w	80007bc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000946:	b003      	add	sp, #12
 8000948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800094c:	4654      	mov	r4, sl
 800094e:	e7d4      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000950:	2401      	movs	r4, #1
 8000952:	e7d2      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000954:	2402      	movs	r4, #2
 8000956:	e7d0      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000958:	2403      	movs	r4, #3
 800095a:	e7ce      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 800095c:	2404      	movs	r4, #4
 800095e:	e7cc      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000960:	2405      	movs	r4, #5
 8000962:	e7ca      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000964:	2406      	movs	r4, #6
 8000966:	e7c8      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000968:	2407      	movs	r4, #7
 800096a:	e7c6      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 800096c:	2408      	movs	r4, #8
 800096e:	e7c4      	b.n	80008fa <HAL_GPIO_Init+0x14a>
 8000970:	40013c00 	.word	0x40013c00
 8000974:	40020000 	.word	0x40020000
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800097c:	b10a      	cbz	r2, 8000982 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800097e:	6181      	str	r1, [r0, #24]
  }
}
 8000980:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000982:	0409      	lsls	r1, r1, #16
 8000984:	e7fb      	b.n	800097e <HAL_GPIO_WritePin+0x2>
	...

08000988 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000988:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000990:	4d18      	ldr	r5, [pc, #96]	; (80009f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000994:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000998:	641a      	str	r2, [r3, #64]	; 0x40
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_PWREx_EnableOverDrive+0x70>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80009aa:	f7ff fea1 	bl	80006f0 <HAL_GetTick>
 80009ae:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80009b0:	686b      	ldr	r3, [r5, #4]
 80009b2:	03da      	lsls	r2, r3, #15
 80009b4:	d50b      	bpl.n	80009ce <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009b8:	4d0e      	ldr	r5, [pc, #56]	; (80009f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80009be:	f7ff fe97 	bl	80006f0 <HAL_GetTick>
 80009c2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80009c4:	686b      	ldr	r3, [r5, #4]
 80009c6:	039b      	lsls	r3, r3, #14
 80009c8:	d50a      	bpl.n	80009e0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80009ca:	2000      	movs	r0, #0
 80009cc:	e006      	b.n	80009dc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009ce:	f7ff fe8f 	bl	80006f0 <HAL_GetTick>
 80009d2:	1b00      	subs	r0, r0, r4
 80009d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009d8:	d9ea      	bls.n	80009b0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80009da:	2003      	movs	r0, #3
}
 80009dc:	b003      	add	sp, #12
 80009de:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009e0:	f7ff fe86 	bl	80006f0 <HAL_GetTick>
 80009e4:	1b00      	subs	r0, r0, r4
 80009e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009ea:	d9eb      	bls.n	80009c4 <HAL_PWREx_EnableOverDrive+0x3c>
 80009ec:	e7f5      	b.n	80009da <HAL_PWREx_EnableOverDrive+0x52>
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000
 80009f8:	420e0040 	.word	0x420e0040
 80009fc:	420e0044 	.word	0x420e0044

08000a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a04:	4604      	mov	r4, r0
 8000a06:	b340      	cbz	r0, 8000a5a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a08:	6803      	ldr	r3, [r0, #0]
 8000a0a:	07dd      	lsls	r5, r3, #31
 8000a0c:	d410      	bmi.n	8000a30 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	0798      	lsls	r0, r3, #30
 8000a12:	d45e      	bmi.n	8000ad2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	071a      	lsls	r2, r3, #28
 8000a18:	f100 80a0 	bmi.w	8000b5c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	075b      	lsls	r3, r3, #29
 8000a20:	f100 80be 	bmi.w	8000ba0 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a24:	69a0      	ldr	r0, [r4, #24]
 8000a26:	2800      	cmp	r0, #0
 8000a28:	f040 811f 	bne.w	8000c6a <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	e02b      	b.n	8000a88 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a30:	4ba6      	ldr	r3, [pc, #664]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	f002 020c 	and.w	r2, r2, #12
 8000a38:	2a04      	cmp	r2, #4
 8000a3a:	d007      	beq.n	8000a4c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a42:	2a08      	cmp	r2, #8
 8000a44:	d10b      	bne.n	8000a5e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	0251      	lsls	r1, r2, #9
 8000a4a:	d508      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a4c:	4b9f      	ldr	r3, [pc, #636]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	039a      	lsls	r2, r3, #14
 8000a52:	d5dc      	bpl.n	8000a0e <HAL_RCC_OscConfig+0xe>
 8000a54:	6863      	ldr	r3, [r4, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1d9      	bne.n	8000a0e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	e014      	b.n	8000a88 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5e:	6862      	ldr	r2, [r4, #4]
 8000a60:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a64:	d113      	bne.n	8000a8e <HAL_RCC_OscConfig+0x8e>
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a6e:	f7ff fe3f 	bl	80006f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a72:	4e96      	ldr	r6, [pc, #600]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000a74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a76:	6833      	ldr	r3, [r6, #0]
 8000a78:	039b      	lsls	r3, r3, #14
 8000a7a:	d4c8      	bmi.n	8000a0e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a7c:	f7ff fe38 	bl	80006f0 <HAL_GetTick>
 8000a80:	1b40      	subs	r0, r0, r5
 8000a82:	2864      	cmp	r0, #100	; 0x64
 8000a84:	d9f7      	bls.n	8000a76 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000a86:	2003      	movs	r0, #3
}
 8000a88:	b002      	add	sp, #8
 8000a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a8e:	4d8f      	ldr	r5, [pc, #572]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000a90:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	d107      	bne.n	8000aa8 <HAL_RCC_OscConfig+0xa8>
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9c:	602b      	str	r3, [r5, #0]
 8000a9e:	682b      	ldr	r3, [r5, #0]
 8000aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000aa6:	e7e2      	b.n	8000a6e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aac:	602b      	str	r3, [r5, #0]
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d1d9      	bne.n	8000a6e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000aba:	f7ff fe19 	bl	80006f0 <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	039f      	lsls	r7, r3, #14
 8000ac4:	d5a3      	bpl.n	8000a0e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fe13 	bl	80006f0 <HAL_GetTick>
 8000aca:	1b80      	subs	r0, r0, r6
 8000acc:	2864      	cmp	r0, #100	; 0x64
 8000ace:	d9f7      	bls.n	8000ac0 <HAL_RCC_OscConfig+0xc0>
 8000ad0:	e7d9      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ad2:	4b7e      	ldr	r3, [pc, #504]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	f012 0f0c 	tst.w	r2, #12
 8000ada:	d007      	beq.n	8000aec <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ae2:	2a08      	cmp	r2, #8
 8000ae4:	d111      	bne.n	8000b0a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	025e      	lsls	r6, r3, #9
 8000aea:	d40e      	bmi.n	8000b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aec:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	0795      	lsls	r5, r2, #30
 8000af2:	d502      	bpl.n	8000afa <HAL_RCC_OscConfig+0xfa>
 8000af4:	68e2      	ldr	r2, [r4, #12]
 8000af6:	2a01      	cmp	r2, #1
 8000af8:	d1af      	bne.n	8000a5a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	6921      	ldr	r1, [r4, #16]
 8000afe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b02:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000b06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b08:	e784      	b.n	8000a14 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b0a:	68e2      	ldr	r2, [r4, #12]
 8000b0c:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <HAL_RCC_OscConfig+0x2d0>)
 8000b0e:	b1b2      	cbz	r2, 8000b3e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b14:	f7ff fdec 	bl	80006f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b18:	4d6c      	ldr	r5, [pc, #432]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000b1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	0798      	lsls	r0, r3, #30
 8000b20:	d507      	bpl.n	8000b32 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b22:	682b      	ldr	r3, [r5, #0]
 8000b24:	6922      	ldr	r2, [r4, #16]
 8000b26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b2e:	602b      	str	r3, [r5, #0]
 8000b30:	e770      	b.n	8000a14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b32:	f7ff fddd 	bl	80006f0 <HAL_GetTick>
 8000b36:	1b80      	subs	r0, r0, r6
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9ef      	bls.n	8000b1c <HAL_RCC_OscConfig+0x11c>
 8000b3c:	e7a3      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000b3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b40:	f7ff fdd6 	bl	80006f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b44:	4e61      	ldr	r6, [pc, #388]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000b46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b48:	6833      	ldr	r3, [r6, #0]
 8000b4a:	0799      	lsls	r1, r3, #30
 8000b4c:	f57f af62 	bpl.w	8000a14 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b50:	f7ff fdce 	bl	80006f0 <HAL_GetTick>
 8000b54:	1b40      	subs	r0, r0, r5
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d9f6      	bls.n	8000b48 <HAL_RCC_OscConfig+0x148>
 8000b5a:	e794      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b5c:	6962      	ldr	r2, [r4, #20]
 8000b5e:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <HAL_RCC_OscConfig+0x2d4>)
 8000b60:	b17a      	cbz	r2, 8000b82 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b66:	f7ff fdc3 	bl	80006f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6a:	4e58      	ldr	r6, [pc, #352]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000b6c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b70:	079f      	lsls	r7, r3, #30
 8000b72:	f53f af53 	bmi.w	8000a1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b76:	f7ff fdbb 	bl	80006f0 <HAL_GetTick>
 8000b7a:	1b40      	subs	r0, r0, r5
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f6      	bls.n	8000b6e <HAL_RCC_OscConfig+0x16e>
 8000b80:	e781      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000b82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b84:	f7ff fdb4 	bl	80006f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b88:	4e50      	ldr	r6, [pc, #320]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000b8a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b8c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b8e:	0798      	lsls	r0, r3, #30
 8000b90:	f57f af44 	bpl.w	8000a1c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b94:	f7ff fdac 	bl	80006f0 <HAL_GetTick>
 8000b98:	1b40      	subs	r0, r0, r5
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x18c>
 8000b9e:	e772      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ba0:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ba8:	d128      	bne.n	8000bfc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	9201      	str	r2, [sp, #4]
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bbe:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc0:	4d45      	ldr	r5, [pc, #276]	; (8000cd8 <HAL_RCC_OscConfig+0x2d8>)
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	05d9      	lsls	r1, r3, #23
 8000bc6:	d51b      	bpl.n	8000c00 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc8:	68a3      	ldr	r3, [r4, #8]
 8000bca:	4d40      	ldr	r5, [pc, #256]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d127      	bne.n	8000c20 <HAL_RCC_OscConfig+0x220>
 8000bd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000bd8:	f7ff fd8a 	bl	80006f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bdc:	4e3b      	ldr	r6, [pc, #236]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000bde:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000be4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000be6:	079b      	lsls	r3, r3, #30
 8000be8:	d539      	bpl.n	8000c5e <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	f43f af1a 	beq.w	8000a24 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bf0:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000bf2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	e713      	b.n	8000a24 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e7df      	b.n	8000bc0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c00:	682b      	ldr	r3, [r5, #0]
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000c08:	f7ff fd72 	bl	80006f0 <HAL_GetTick>
 8000c0c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c0e:	682b      	ldr	r3, [r5, #0]
 8000c10:	05da      	lsls	r2, r3, #23
 8000c12:	d4d9      	bmi.n	8000bc8 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c14:	f7ff fd6c 	bl	80006f0 <HAL_GetTick>
 8000c18:	1b80      	subs	r0, r0, r6
 8000c1a:	2802      	cmp	r0, #2
 8000c1c:	d9f7      	bls.n	8000c0e <HAL_RCC_OscConfig+0x20e>
 8000c1e:	e732      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d104      	bne.n	8000c2e <HAL_RCC_OscConfig+0x22e>
 8000c24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	672b      	str	r3, [r5, #112]	; 0x70
 8000c2c:	e7d0      	b.n	8000bd0 <HAL_RCC_OscConfig+0x1d0>
 8000c2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c30:	f022 0201 	bic.w	r2, r2, #1
 8000c34:	672a      	str	r2, [r5, #112]	; 0x70
 8000c36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000c38:	f022 0204 	bic.w	r2, r2, #4
 8000c3c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1ca      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8000c42:	f7ff fd55 	bl	80006f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c46:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c4a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c4e:	0798      	lsls	r0, r3, #30
 8000c50:	d5cb      	bpl.n	8000bea <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c52:	f7ff fd4d 	bl	80006f0 <HAL_GetTick>
 8000c56:	1b80      	subs	r0, r0, r6
 8000c58:	4540      	cmp	r0, r8
 8000c5a:	d9f7      	bls.n	8000c4c <HAL_RCC_OscConfig+0x24c>
 8000c5c:	e713      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c5e:	f7ff fd47 	bl	80006f0 <HAL_GetTick>
 8000c62:	1b40      	subs	r0, r0, r5
 8000c64:	4540      	cmp	r0, r8
 8000c66:	d9bd      	bls.n	8000be4 <HAL_RCC_OscConfig+0x1e4>
 8000c68:	e70d      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c6a:	4d18      	ldr	r5, [pc, #96]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
 8000c6c:	68ab      	ldr	r3, [r5, #8]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d047      	beq.n	8000d06 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c76:	4e19      	ldr	r6, [pc, #100]	; (8000cdc <HAL_RCC_OscConfig+0x2dc>)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c7c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c7e:	d135      	bne.n	8000cec <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000c80:	f7ff fd36 	bl	80006f0 <HAL_GetTick>
 8000c84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	0199      	lsls	r1, r3, #6
 8000c8a:	d429      	bmi.n	8000ce0 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c8c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ca0:	0852      	lsrs	r2, r2, #1
 8000ca2:	3a01      	subs	r2, #1
 8000ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000caa:	2301      	movs	r3, #1
 8000cac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000cae:	f7ff fd1f 	bl	80006f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb2:	4d06      	ldr	r5, [pc, #24]	; (8000ccc <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000cb4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb6:	682b      	ldr	r3, [r5, #0]
 8000cb8:	019a      	lsls	r2, r3, #6
 8000cba:	f53f aeb7 	bmi.w	8000a2c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cbe:	f7ff fd17 	bl	80006f0 <HAL_GetTick>
 8000cc2:	1b00      	subs	r0, r0, r4
 8000cc4:	2802      	cmp	r0, #2
 8000cc6:	d9f6      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x2b6>
 8000cc8:	e6dd      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	42470000 	.word	0x42470000
 8000cd4:	42470e80 	.word	0x42470e80
 8000cd8:	40007000 	.word	0x40007000
 8000cdc:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce0:	f7ff fd06 	bl	80006f0 <HAL_GetTick>
 8000ce4:	1bc0      	subs	r0, r0, r7
 8000ce6:	2802      	cmp	r0, #2
 8000ce8:	d9cd      	bls.n	8000c86 <HAL_RCC_OscConfig+0x286>
 8000cea:	e6cc      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000cec:	f7ff fd00 	bl	80006f0 <HAL_GetTick>
 8000cf0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cf2:	682b      	ldr	r3, [r5, #0]
 8000cf4:	019b      	lsls	r3, r3, #6
 8000cf6:	f57f ae99 	bpl.w	8000a2c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfa:	f7ff fcf9 	bl	80006f0 <HAL_GetTick>
 8000cfe:	1b00      	subs	r0, r0, r4
 8000d00:	2802      	cmp	r0, #2
 8000d02:	d9f6      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x2f2>
 8000d04:	e6bf      	b.n	8000a86 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d06:	2801      	cmp	r0, #1
 8000d08:	f43f aebe 	beq.w	8000a88 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000d0c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d0e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d10:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d14:	4291      	cmp	r1, r2
 8000d16:	f47f aea0 	bne.w	8000a5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d1a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d20:	428a      	cmp	r2, r1
 8000d22:	f47f ae9a 	bne.w	8000a5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d26:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000d28:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000d32:	f47f ae92 	bne.w	8000a5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d38:	0852      	lsrs	r2, r2, #1
 8000d3a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000d3e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d40:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000d44:	f47f ae89 	bne.w	8000a5a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000d48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d4a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d4e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000d52:	f43f ae6b 	beq.w	8000a2c <HAL_RCC_OscConfig+0x2c>
 8000d56:	e680      	b.n	8000a5a <HAL_RCC_OscConfig+0x5a>

08000d58 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d58:	4913      	ldr	r1, [pc, #76]	; (8000da8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000d5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d5c:	688b      	ldr	r3, [r1, #8]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d01c      	beq.n	8000da0 <HAL_RCC_GetSysClockFreq+0x48>
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d11c      	bne.n	8000da4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d6a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d6c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d6e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d70:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d74:	bf14      	ite	ne
 8000d76:	480d      	ldrne	r0, [pc, #52]	; (8000dac <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d78:	480d      	ldreq	r0, [pc, #52]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d7a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d7e:	bf18      	it	ne
 8000d80:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d86:	fba1 0100 	umull	r0, r1, r1, r0
 8000d8a:	f7ff fa81 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d96:	3301      	adds	r3, #1
 8000d98:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d9a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d9e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <HAL_RCC_GetSysClockFreq+0x54>)
 8000da2:	e7fc      	b.n	8000d9e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000da6:	e7fa      	b.n	8000d9e <HAL_RCC_GetSysClockFreq+0x46>
 8000da8:	40023800 	.word	0x40023800
 8000dac:	007a1200 	.word	0x007a1200
 8000db0:	00f42400 	.word	0x00f42400

08000db4 <HAL_RCC_ClockConfig>:
{
 8000db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000dba:	4604      	mov	r4, r0
 8000dbc:	b910      	cbnz	r0, 8000dc4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
}
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <HAL_RCC_ClockConfig+0x124>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	f002 020f 	and.w	r2, r2, #15
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d328      	bcc.n	8000e22 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	0797      	lsls	r7, r2, #30
 8000dd4:	d42d      	bmi.n	8000e32 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dd6:	07d0      	lsls	r0, r2, #31
 8000dd8:	d441      	bmi.n	8000e5e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <HAL_RCC_ClockConfig+0x124>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f002 020f 	and.w	r2, r2, #15
 8000de2:	42aa      	cmp	r2, r5
 8000de4:	d866      	bhi.n	8000eb4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	0751      	lsls	r1, r2, #29
 8000dea:	d46c      	bmi.n	8000ec6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dec:	0713      	lsls	r3, r2, #28
 8000dee:	d507      	bpl.n	8000e00 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000df0:	4a3a      	ldr	r2, [pc, #232]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000df2:	6921      	ldr	r1, [r4, #16]
 8000df4:	6893      	ldr	r3, [r2, #8]
 8000df6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dfe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000e00:	f7ff ffaa 	bl	8000d58 <HAL_RCC_GetSysClockFreq>
 8000e04:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000e06:	4a36      	ldr	r2, [pc, #216]	; (8000ee0 <HAL_RCC_ClockConfig+0x12c>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	40d8      	lsrs	r0, r3
 8000e12:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <HAL_RCC_ClockConfig+0x130>)
 8000e14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <HAL_RCC_ClockConfig+0x134>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	f7ff fc25 	bl	8000668 <HAL_InitTick>
  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
 8000e20:	e7ce      	b.n	8000dc0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d1c6      	bne.n	8000dbe <HAL_RCC_ClockConfig+0xa>
 8000e30:	e7ce      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000e34:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e38:	bf1e      	ittt	ne
 8000e3a:	6899      	ldrne	r1, [r3, #8]
 8000e3c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000e40:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e42:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e44:	bf42      	ittt	mi
 8000e46:	6899      	ldrmi	r1, [r3, #8]
 8000e48:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000e4c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e4e:	4923      	ldr	r1, [pc, #140]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000e50:	68a0      	ldr	r0, [r4, #8]
 8000e52:	688b      	ldr	r3, [r1, #8]
 8000e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e58:	4303      	orrs	r3, r0
 8000e5a:	608b      	str	r3, [r1, #8]
 8000e5c:	e7bb      	b.n	8000dd6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e5e:	6862      	ldr	r2, [r4, #4]
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000e62:	2a01      	cmp	r2, #1
 8000e64:	d11c      	bne.n	8000ea0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	d0a7      	beq.n	8000dbe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e6e:	4e1b      	ldr	r6, [pc, #108]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000e70:	68b3      	ldr	r3, [r6, #8]
 8000e72:	f023 0303 	bic.w	r3, r3, #3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e7a:	f7ff fc39 	bl	80006f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e84:	68b3      	ldr	r3, [r6, #8]
 8000e86:	6862      	ldr	r2, [r4, #4]
 8000e88:	f003 030c 	and.w	r3, r3, #12
 8000e8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e90:	d0a3      	beq.n	8000dda <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e92:	f7ff fc2d 	bl	80006f0 <HAL_GetTick>
 8000e96:	1bc0      	subs	r0, r0, r7
 8000e98:	4540      	cmp	r0, r8
 8000e9a:	d9f3      	bls.n	8000e84 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	e78f      	b.n	8000dc0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ea0:	1e91      	subs	r1, r2, #2
 8000ea2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ea6:	d802      	bhi.n	8000eae <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000eac:	e7de      	b.n	8000e6c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eae:	f013 0f02 	tst.w	r3, #2
 8000eb2:	e7db      	b.n	8000e6c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb4:	b2ea      	uxtb	r2, r5
 8000eb6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	f47f af7d 	bne.w	8000dbe <HAL_RCC_ClockConfig+0xa>
 8000ec4:	e78f      	b.n	8000de6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ec6:	4905      	ldr	r1, [pc, #20]	; (8000edc <HAL_RCC_ClockConfig+0x128>)
 8000ec8:	68e0      	ldr	r0, [r4, #12]
 8000eca:	688b      	ldr	r3, [r1, #8]
 8000ecc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ed0:	4303      	orrs	r3, r0
 8000ed2:	608b      	str	r3, [r1, #8]
 8000ed4:	e78a      	b.n	8000dec <HAL_RCC_ClockConfig+0x38>
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	0800230e 	.word	0x0800230e
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	20000018 	.word	0x20000018

08000eec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000efa:	6810      	ldr	r0, [r2, #0]
}
 8000efc:	40d8      	lsrs	r0, r3
 8000efe:	4770      	bx	lr
 8000f00:	40023800 	.word	0x40023800
 8000f04:	0800231e 	.word	0x0800231e
 8000f08:	20000010 	.word	0x20000010

08000f0c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f1a:	6810      	ldr	r0, [r2, #0]
}
 8000f1c:	40d8      	lsrs	r0, r3
 8000f1e:	4770      	bx	lr
 8000f20:	40023800 	.word	0x40023800
 8000f24:	0800231e 	.word	0x0800231e
 8000f28:	20000010 	.word	0x20000010

08000f2c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f2c:	6802      	ldr	r2, [r0, #0]
 8000f2e:	68c1      	ldr	r1, [r0, #12]
{
 8000f30:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f32:	6913      	ldr	r3, [r2, #16]
 8000f34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6113      	str	r3, [r2, #16]
{
 8000f3c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f3e:	6883      	ldr	r3, [r0, #8]
 8000f40:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f42:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f44:	4303      	orrs	r3, r0
 8000f46:	6968      	ldr	r0, [r5, #20]
 8000f48:	4303      	orrs	r3, r0
 8000f4a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8000f4c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8000f50:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f54:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f56:	430b      	orrs	r3, r1
 8000f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f5a:	6953      	ldr	r3, [r2, #20]
 8000f5c:	69a9      	ldr	r1, [r5, #24]
 8000f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f62:	430b      	orrs	r3, r1
 8000f64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f66:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <UART_SetConfig+0xb8>)
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d003      	beq.n	8000f74 <UART_SetConfig+0x48>
 8000f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d124      	bne.n	8000fbe <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f74:	f7ff ffca 	bl	8000f0c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f78:	69ea      	ldr	r2, [r5, #28]
 8000f7a:	2319      	movs	r3, #25
 8000f7c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f80:	fba0 0103 	umull	r0, r1, r0, r3
 8000f84:	e9d5 4300 	ldrd	r4, r3, [r5]
 8000f88:	d11c      	bne.n	8000fc4 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	1892      	adds	r2, r2, r2
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	415b      	adcs	r3, r3
 8000f94:	f7ff f97c 	bl	8000290 <__aeabi_uldivmod>
 8000f98:	2164      	movs	r1, #100	; 0x64
 8000f9a:	fbb0 f5f1 	udiv	r5, r0, r1
 8000f9e:	fb01 0315 	mls	r3, r1, r5, r0
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	3332      	adds	r3, #50	; 0x32
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	f003 0207 	and.w	r2, r3, #7
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8000fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000fb8:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fba:	60a3      	str	r3, [r4, #8]
  }
}
 8000fbc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000fbe:	f7ff ff95 	bl	8000eec <HAL_RCC_GetPCLK1Freq>
 8000fc2:	e7d9      	b.n	8000f78 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fc4:	009a      	lsls	r2, r3, #2
 8000fc6:	0f9b      	lsrs	r3, r3, #30
 8000fc8:	f7ff f962 	bl	8000290 <__aeabi_uldivmod>
 8000fcc:	2264      	movs	r2, #100	; 0x64
 8000fce:	fbb0 f1f2 	udiv	r1, r0, r2
 8000fd2:	fb02 0311 	mls	r3, r2, r1, r0
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	3332      	adds	r3, #50	; 0x32
 8000fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fde:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000fe2:	e7ea      	b.n	8000fba <UART_SetConfig+0x8e>
 8000fe4:	40011000 	.word	0x40011000

08000fe8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	4604      	mov	r4, r0
 8000fec:	460e      	mov	r6, r1
 8000fee:	4617      	mov	r7, r2
 8000ff0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	ea36 0303 	bics.w	r3, r6, r3
 8000ffa:	d101      	bne.n	8001000 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	e028      	b.n	8001052 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001000:	1c6b      	adds	r3, r5, #1
 8001002:	d0f7      	beq.n	8000ff4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001004:	b125      	cbz	r5, 8001010 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001006:	f7ff fb73 	bl	80006f0 <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	4285      	cmp	r5, r0
 800100e:	d2f0      	bcs.n	8000ff2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001010:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001012:	f102 030c 	add.w	r3, r2, #12
 8001016:	e853 3f00 	ldrex	r3, [r3]
 800101a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800101e:	320c      	adds	r2, #12
 8001020:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001024:	6821      	ldr	r1, [r4, #0]
 8001026:	2800      	cmp	r0, #0
 8001028:	d1f2      	bne.n	8001010 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800102a:	f101 0314 	add.w	r3, r1, #20
 800102e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001032:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001036:	f101 0014 	add.w	r0, r1, #20
 800103a:	e840 3200 	strex	r2, r3, [r0]
 800103e:	2a00      	cmp	r2, #0
 8001040:	d1f3      	bne.n	800102a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8001042:	2320      	movs	r3, #32
 8001044:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001048:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800104c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001050:	2003      	movs	r0, #3
}
 8001052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001054 <HAL_UART_Init>:
{
 8001054:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001056:	4604      	mov	r4, r0
 8001058:	b340      	cbz	r0, 80010ac <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800105a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800105e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001062:	b91b      	cbnz	r3, 800106c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001064:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001068:	f000 f96e 	bl	8001348 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800106c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800106e:	2324      	movs	r3, #36	; 0x24
 8001070:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001074:	68d3      	ldr	r3, [r2, #12]
 8001076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800107a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff ff55 	bl	8000f2c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	691a      	ldr	r2, [r3, #16]
 8001086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800108a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800108c:	695a      	ldr	r2, [r3, #20]
 800108e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001092:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800109a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800109c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800109e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80010a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80010a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80010aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
 80010ae:	e7fc      	b.n	80010aa <HAL_UART_Init+0x56>

080010b0 <HAL_UART_Transmit>:
{
 80010b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010b2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80010b4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80010b8:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80010ba:	2a20      	cmp	r2, #32
{
 80010bc:	4604      	mov	r4, r0
 80010be:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80010c0:	d149      	bne.n	8001156 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d045      	beq.n	8001152 <HAL_UART_Transmit+0xa2>
 80010c6:	2f00      	cmp	r7, #0
 80010c8:	d043      	beq.n	8001152 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80010ca:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80010ce:	2a01      	cmp	r2, #1
 80010d0:	d041      	beq.n	8001156 <HAL_UART_Transmit+0xa6>
 80010d2:	2201      	movs	r2, #1
 80010d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010d8:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010da:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010dc:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80010e2:	f7ff fb05 	bl	80006f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010e6:	68a1      	ldr	r1, [r4, #8]
 80010e8:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80010ea:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010ec:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80010f0:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80010f2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010f4:	d103      	bne.n	80010fe <HAL_UART_Transmit+0x4e>
 80010f6:	6921      	ldr	r1, [r4, #16]
 80010f8:	b909      	cbnz	r1, 80010fe <HAL_UART_Transmit+0x4e>
 80010fa:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80010fc:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 80010fe:	2100      	movs	r1, #0
 8001100:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001104:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001106:	b289      	uxth	r1, r1
 8001108:	b941      	cbnz	r1, 800111c <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff ff6b 	bl	8000fe8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001112:	b960      	cbnz	r0, 800112e <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001114:	2320      	movs	r3, #32
 8001116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800111a:	e009      	b.n	8001130 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4620      	mov	r0, r4
 8001120:	e9cd 2300 	strd	r2, r3, [sp]
 8001124:	f7ff ff60 	bl	8000fe8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800112c:	b110      	cbz	r0, 8001134 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800112e:	2003      	movs	r0, #3
}
 8001130:	b003      	add	sp, #12
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8001134:	6820      	ldr	r0, [r4, #0]
 8001136:	b94e      	cbnz	r6, 800114c <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001138:	f835 1b02 	ldrh.w	r1, [r5], #2
 800113c:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001140:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8001142:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001144:	3901      	subs	r1, #1
 8001146:	b289      	uxth	r1, r1
 8001148:	84e1      	strh	r1, [r4, #38]	; 0x26
 800114a:	e7db      	b.n	8001104 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800114c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001150:	e7f6      	b.n	8001140 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001152:	2001      	movs	r0, #1
 8001154:	e7ec      	b.n	8001130 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001156:	2002      	movs	r0, #2
 8001158:	e7ea      	b.n	8001130 <HAL_UART_Transmit+0x80>
	...

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001162:	e003      	b.n	800116c <LoopCopyDataInit>

08001164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800116a:	3104      	adds	r1, #4

0800116c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001174:	d3f6      	bcc.n	8001164 <CopyDataInit>
  ldr  r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001178:	e002      	b.n	8001180 <LoopFillZerobss>

0800117a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800117a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800117c:	f842 3b04 	str.w	r3, [r2], #4

08001180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001184:	d3f9      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001186:	f7ff fa47 	bl	8000618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f000 f92d 	bl	80013e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f000 f84f 	bl	8001230 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001194:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001198:	08002440 	.word	0x08002440
  ldr  r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011a0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80011a4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80011a8:	20000104 	.word	0x20000104

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>

080011ae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80011ae:	b570      	push	{r4, r5, r6, lr}
 80011b0:	460e      	mov	r6, r1
 80011b2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	2500      	movs	r5, #0
 80011b6:	42a5      	cmp	r5, r4
 80011b8:	db01      	blt.n	80011be <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80011ba:	4620      	mov	r0, r4
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80011be:	f3af 8000 	nop.w
 80011c2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	3501      	adds	r5, #1
 80011c6:	e7f6      	b.n	80011b6 <_read+0x8>

080011c8 <_write>:

int _write(int file, char *ptr, int len)
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	460e      	mov	r6, r1
 80011cc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	2500      	movs	r5, #0
 80011d0:	42a5      	cmp	r5, r4
 80011d2:	db01      	blt.n	80011d8 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80011d4:	4620      	mov	r0, r4
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80011d8:	5d70      	ldrb	r0, [r6, r5]
 80011da:	f000 f8a5 	bl	8001328 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	3501      	adds	r5, #1
 80011e0:	e7f6      	b.n	80011d0 <_write+0x8>
	...

080011e4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80011e4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <_sbrk+0x2c>)
 80011e8:	6819      	ldr	r1, [r3, #0]
{
 80011ea:	4602      	mov	r2, r0
	if (heap_end == 0)
 80011ec:	b909      	cbnz	r1, 80011f2 <_sbrk+0xe>
		heap_end = &end;
 80011ee:	4909      	ldr	r1, [pc, #36]	; (8001214 <_sbrk+0x30>)
 80011f0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80011f2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80011f4:	4669      	mov	r1, sp
 80011f6:	4402      	add	r2, r0
 80011f8:	428a      	cmp	r2, r1
 80011fa:	d906      	bls.n	800120a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80011fc:	f000 f8ee 	bl	80013dc <__errno>
 8001200:	230c      	movs	r3, #12
 8001202:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001208:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800120a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800120c:	e7fc      	b.n	8001208 <_sbrk+0x24>
 800120e:	bf00      	nop
 8001210:	2000009c 	.word	0x2000009c
 8001214:	20000108 	.word	0x20000108

08001218 <_close>:

int _close(int file)
{
	return -1;
}
 8001218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001224:	2000      	movs	r0, #0
 8001226:	4770      	bx	lr

08001228 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001228:	2001      	movs	r0, #1
 800122a:	4770      	bx	lr

0800122c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800122c:	2000      	movs	r0, #0
 800122e:	4770      	bx	lr

08001230 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001230:	b500      	push	{lr}
 8001232:	b095      	sub	sp, #84	; 0x54
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8001234:	f7ff fa3a 	bl	80006ac <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	4b35      	ldr	r3, [pc, #212]	; (8001310 <main+0xe0>)
 800123a:	2100      	movs	r1, #0
 800123c:	9101      	str	r1, [sp, #4]
 800123e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	9b01      	ldr	r3, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <main+0xe4>)
 8001252:	9102      	str	r1, [sp, #8]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	9b02      	ldr	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001266:	2501      	movs	r5, #1
 8001268:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800126e:	e9cd 5308 	strd	r5, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001276:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001278:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 360;
 800127c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001280:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001284:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800128a:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f7ff fbb8 	bl	8000a00 <HAL_RCC_OscConfig>
 8001290:	b118      	cbz	r0, 800129a <main+0x6a>
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8001292:	4628      	mov	r0, r5
 8001294:	f7ff f9b2 	bl	80005fc <BSP_LED_On>
  while (1)
 8001298:	e7fe      	b.n	8001298 <main+0x68>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800129a:	f7ff fb75 	bl	8000988 <HAL_PWREx_EnableOverDrive>
 800129e:	b118      	cbz	r0, 80012a8 <main+0x78>
  BSP_LED_On(LED2);
 80012a0:	4628      	mov	r0, r5
 80012a2:	f7ff f9ab 	bl	80005fc <BSP_LED_On>
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <main+0x76>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012a8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80012ae:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012bc:	2105      	movs	r1, #5
 80012be:	a803      	add	r0, sp, #12
 80012c0:	f7ff fd78 	bl	8000db4 <HAL_RCC_ClockConfig>
 80012c4:	4604      	mov	r4, r0
  BSP_LED_On(LED2);
 80012c6:	4628      	mov	r0, r5
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c8:	b114      	cbz	r4, 80012d0 <main+0xa0>
  BSP_LED_On(LED2);
 80012ca:	f7ff f997 	bl	80005fc <BSP_LED_On>
  while (1)
 80012ce:	e7fe      	b.n	80012ce <main+0x9e>
  BSP_LED_Init(LED2);
 80012d0:	f7ff f95a 	bl	8000588 <BSP_LED_Init>
  UartHandle.Instance        = USARTx;
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <main+0xe8>)
  UartHandle.Init.BaudRate   = 9600;
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <main+0xec>)
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80012d8:	6184      	str	r4, [r0, #24]
  UartHandle.Init.BaudRate   = 9600;
 80012da:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012de:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 80012e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e6:	6103      	str	r3, [r0, #16]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80012e8:	230c      	movs	r3, #12
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80012ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80012ee:	6143      	str	r3, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80012f2:	f7ff feaf 	bl	8001054 <HAL_UART_Init>
 80012f6:	b118      	cbz	r0, 8001300 <main+0xd0>
  BSP_LED_On(LED2);
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff f97f 	bl	80005fc <BSP_LED_On>
  while (1)
 80012fe:	e7fe      	b.n	80012fe <main+0xce>
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 8001300:	4807      	ldr	r0, [pc, #28]	; (8001320 <main+0xf0>)
 8001302:	f000 f89d 	bl	8001440 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0xf4>)
 8001308:	f000 f89a 	bl	8001440 <iprintf>
  while (1)
 800130c:	e7fe      	b.n	800130c <main+0xdc>
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000
 8001318:	200000b0 	.word	0x200000b0
 800131c:	40004800 	.word	0x40004800
 8001320:	08002326 	.word	0x08002326
 8001324:	08002373 	.word	0x08002373

08001328 <__io_putchar>:
{
 8001328:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 800132a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 800132e:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 8001330:	2201      	movs	r2, #1
 8001332:	a901      	add	r1, sp, #4
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <__io_putchar+0x1c>)
 8001336:	f7ff febb 	bl	80010b0 <HAL_UART_Transmit>
}
 800133a:	9801      	ldr	r0, [sp, #4]
 800133c:	b003      	add	sp, #12
 800133e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001342:	bf00      	nop
 8001344:	200000b0 	.word	0x200000b0

08001348 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001348:	b510      	push	{r4, lr}
 800134a:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_UART_MspInit+0x78>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0x7c>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8001350:	2200      	movs	r2, #0
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001356:	f041 0108 	orr.w	r1, r1, #8
 800135a:	6319      	str	r1, [r3, #48]	; 0x30
 800135c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800135e:	f001 0108 	and.w	r1, r1, #8
 8001362:	9100      	str	r1, [sp, #0]
 8001364:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001366:	9201      	str	r2, [sp, #4]
 8001368:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800136a:	f041 0108 	orr.w	r1, r1, #8
 800136e:	6319      	str	r1, [r3, #48]	; 0x30
 8001370:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001372:	f001 0108 	and.w	r1, r1, #8
 8001376:	9101      	str	r1, [sp, #4]
 8001378:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
 800137a:	9202      	str	r2, [sp, #8]
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800138c:	f44f 7280 	mov.w	r2, #256	; 0x100
  USARTx_CLK_ENABLE();
 8001390:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2101      	movs	r1, #1
 800139a:	2303      	movs	r3, #3
 800139c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013a0:	2407      	movs	r4, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013a2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80013a4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80013a6:	f7ff fa03 	bl	80007b0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_UART_MspInit+0x7c>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80013b0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013b2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80013b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80013b6:	f7ff f9fb 	bl	80007b0 <HAL_GPIO_Init>
}
 80013ba:	b008      	add	sp, #32
 80013bc:	bd10      	pop	{r4, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020c00 	.word	0x40020c00

080013c8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80013c8:	4770      	bx	lr

080013ca <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler>

080013cc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler>

080013ce <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler>

080013d0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler>

080013d2 <SVC_Handler>:
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    HAL_IncTick();
 80013d8:	f7ff b97e 	b.w	80006d8 <HAL_IncTick>

080013dc <__errno>:
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <__errno+0x8>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	2000001c 	.word	0x2000001c

080013e8 <__libc_init_array>:
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	4d0d      	ldr	r5, [pc, #52]	; (8001420 <__libc_init_array+0x38>)
 80013ec:	4c0d      	ldr	r4, [pc, #52]	; (8001424 <__libc_init_array+0x3c>)
 80013ee:	1b64      	subs	r4, r4, r5
 80013f0:	10a4      	asrs	r4, r4, #2
 80013f2:	2600      	movs	r6, #0
 80013f4:	42a6      	cmp	r6, r4
 80013f6:	d109      	bne.n	800140c <__libc_init_array+0x24>
 80013f8:	4d0b      	ldr	r5, [pc, #44]	; (8001428 <__libc_init_array+0x40>)
 80013fa:	4c0c      	ldr	r4, [pc, #48]	; (800142c <__libc_init_array+0x44>)
 80013fc:	f000 ff76 	bl	80022ec <_init>
 8001400:	1b64      	subs	r4, r4, r5
 8001402:	10a4      	asrs	r4, r4, #2
 8001404:	2600      	movs	r6, #0
 8001406:	42a6      	cmp	r6, r4
 8001408:	d105      	bne.n	8001416 <__libc_init_array+0x2e>
 800140a:	bd70      	pop	{r4, r5, r6, pc}
 800140c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001410:	4798      	blx	r3
 8001412:	3601      	adds	r6, #1
 8001414:	e7ee      	b.n	80013f4 <__libc_init_array+0xc>
 8001416:	f855 3b04 	ldr.w	r3, [r5], #4
 800141a:	4798      	blx	r3
 800141c:	3601      	adds	r6, #1
 800141e:	e7f2      	b.n	8001406 <__libc_init_array+0x1e>
 8001420:	08002438 	.word	0x08002438
 8001424:	08002438 	.word	0x08002438
 8001428:	08002438 	.word	0x08002438
 800142c:	0800243c 	.word	0x0800243c

08001430 <memset>:
 8001430:	4402      	add	r2, r0
 8001432:	4603      	mov	r3, r0
 8001434:	4293      	cmp	r3, r2
 8001436:	d100      	bne.n	800143a <memset+0xa>
 8001438:	4770      	bx	lr
 800143a:	f803 1b01 	strb.w	r1, [r3], #1
 800143e:	e7f9      	b.n	8001434 <memset+0x4>

08001440 <iprintf>:
 8001440:	b40f      	push	{r0, r1, r2, r3}
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <iprintf+0x2c>)
 8001444:	b513      	push	{r0, r1, r4, lr}
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	b124      	cbz	r4, 8001454 <iprintf+0x14>
 800144a:	69a3      	ldr	r3, [r4, #24]
 800144c:	b913      	cbnz	r3, 8001454 <iprintf+0x14>
 800144e:	4620      	mov	r0, r4
 8001450:	f000 f866 	bl	8001520 <__sinit>
 8001454:	ab05      	add	r3, sp, #20
 8001456:	9a04      	ldr	r2, [sp, #16]
 8001458:	68a1      	ldr	r1, [r4, #8]
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	4620      	mov	r0, r4
 800145e:	f000 f983 	bl	8001768 <_vfiprintf_r>
 8001462:	b002      	add	sp, #8
 8001464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001468:	b004      	add	sp, #16
 800146a:	4770      	bx	lr
 800146c:	2000001c 	.word	0x2000001c

08001470 <std>:
 8001470:	2300      	movs	r3, #0
 8001472:	b510      	push	{r4, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	e9c0 3300 	strd	r3, r3, [r0]
 800147a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800147e:	6083      	str	r3, [r0, #8]
 8001480:	8181      	strh	r1, [r0, #12]
 8001482:	6643      	str	r3, [r0, #100]	; 0x64
 8001484:	81c2      	strh	r2, [r0, #14]
 8001486:	6183      	str	r3, [r0, #24]
 8001488:	4619      	mov	r1, r3
 800148a:	2208      	movs	r2, #8
 800148c:	305c      	adds	r0, #92	; 0x5c
 800148e:	f7ff ffcf 	bl	8001430 <memset>
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <std+0x38>)
 8001494:	6263      	str	r3, [r4, #36]	; 0x24
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <std+0x3c>)
 8001498:	62a3      	str	r3, [r4, #40]	; 0x28
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <std+0x40>)
 800149c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <std+0x44>)
 80014a0:	6224      	str	r4, [r4, #32]
 80014a2:	6323      	str	r3, [r4, #48]	; 0x30
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	bf00      	nop
 80014a8:	08001d11 	.word	0x08001d11
 80014ac:	08001d33 	.word	0x08001d33
 80014b0:	08001d6b 	.word	0x08001d6b
 80014b4:	08001d8f 	.word	0x08001d8f

080014b8 <_cleanup_r>:
 80014b8:	4901      	ldr	r1, [pc, #4]	; (80014c0 <_cleanup_r+0x8>)
 80014ba:	f000 b8af 	b.w	800161c <_fwalk_reent>
 80014be:	bf00      	nop
 80014c0:	08002069 	.word	0x08002069

080014c4 <__sfmoreglue>:
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	1e4a      	subs	r2, r1, #1
 80014c8:	2568      	movs	r5, #104	; 0x68
 80014ca:	4355      	muls	r5, r2
 80014cc:	460e      	mov	r6, r1
 80014ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014d2:	f000 f8c5 	bl	8001660 <_malloc_r>
 80014d6:	4604      	mov	r4, r0
 80014d8:	b140      	cbz	r0, 80014ec <__sfmoreglue+0x28>
 80014da:	2100      	movs	r1, #0
 80014dc:	e9c0 1600 	strd	r1, r6, [r0]
 80014e0:	300c      	adds	r0, #12
 80014e2:	60a0      	str	r0, [r4, #8]
 80014e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014e8:	f7ff ffa2 	bl	8001430 <memset>
 80014ec:	4620      	mov	r0, r4
 80014ee:	bd70      	pop	{r4, r5, r6, pc}

080014f0 <__sfp_lock_acquire>:
 80014f0:	4801      	ldr	r0, [pc, #4]	; (80014f8 <__sfp_lock_acquire+0x8>)
 80014f2:	f000 b8b3 	b.w	800165c <__retarget_lock_acquire_recursive>
 80014f6:	bf00      	nop
 80014f8:	200000fc 	.word	0x200000fc

080014fc <__sfp_lock_release>:
 80014fc:	4801      	ldr	r0, [pc, #4]	; (8001504 <__sfp_lock_release+0x8>)
 80014fe:	f000 b8ae 	b.w	800165e <__retarget_lock_release_recursive>
 8001502:	bf00      	nop
 8001504:	200000fc 	.word	0x200000fc

08001508 <__sinit_lock_acquire>:
 8001508:	4801      	ldr	r0, [pc, #4]	; (8001510 <__sinit_lock_acquire+0x8>)
 800150a:	f000 b8a7 	b.w	800165c <__retarget_lock_acquire_recursive>
 800150e:	bf00      	nop
 8001510:	200000f7 	.word	0x200000f7

08001514 <__sinit_lock_release>:
 8001514:	4801      	ldr	r0, [pc, #4]	; (800151c <__sinit_lock_release+0x8>)
 8001516:	f000 b8a2 	b.w	800165e <__retarget_lock_release_recursive>
 800151a:	bf00      	nop
 800151c:	200000f7 	.word	0x200000f7

08001520 <__sinit>:
 8001520:	b510      	push	{r4, lr}
 8001522:	4604      	mov	r4, r0
 8001524:	f7ff fff0 	bl	8001508 <__sinit_lock_acquire>
 8001528:	69a3      	ldr	r3, [r4, #24]
 800152a:	b11b      	cbz	r3, 8001534 <__sinit+0x14>
 800152c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001530:	f7ff bff0 	b.w	8001514 <__sinit_lock_release>
 8001534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001538:	6523      	str	r3, [r4, #80]	; 0x50
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <__sinit+0x68>)
 800153c:	4a13      	ldr	r2, [pc, #76]	; (800158c <__sinit+0x6c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	62a2      	str	r2, [r4, #40]	; 0x28
 8001542:	42a3      	cmp	r3, r4
 8001544:	bf04      	itt	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	61a3      	streq	r3, [r4, #24]
 800154a:	4620      	mov	r0, r4
 800154c:	f000 f820 	bl	8001590 <__sfp>
 8001550:	6060      	str	r0, [r4, #4]
 8001552:	4620      	mov	r0, r4
 8001554:	f000 f81c 	bl	8001590 <__sfp>
 8001558:	60a0      	str	r0, [r4, #8]
 800155a:	4620      	mov	r0, r4
 800155c:	f000 f818 	bl	8001590 <__sfp>
 8001560:	2200      	movs	r2, #0
 8001562:	60e0      	str	r0, [r4, #12]
 8001564:	2104      	movs	r1, #4
 8001566:	6860      	ldr	r0, [r4, #4]
 8001568:	f7ff ff82 	bl	8001470 <std>
 800156c:	68a0      	ldr	r0, [r4, #8]
 800156e:	2201      	movs	r2, #1
 8001570:	2109      	movs	r1, #9
 8001572:	f7ff ff7d 	bl	8001470 <std>
 8001576:	68e0      	ldr	r0, [r4, #12]
 8001578:	2202      	movs	r2, #2
 800157a:	2112      	movs	r1, #18
 800157c:	f7ff ff78 	bl	8001470 <std>
 8001580:	2301      	movs	r3, #1
 8001582:	61a3      	str	r3, [r4, #24]
 8001584:	e7d2      	b.n	800152c <__sinit+0xc>
 8001586:	bf00      	nop
 8001588:	08002398 	.word	0x08002398
 800158c:	080014b9 	.word	0x080014b9

08001590 <__sfp>:
 8001590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001592:	4607      	mov	r7, r0
 8001594:	f7ff ffac 	bl	80014f0 <__sfp_lock_acquire>
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <__sfp+0x84>)
 800159a:	681e      	ldr	r6, [r3, #0]
 800159c:	69b3      	ldr	r3, [r6, #24]
 800159e:	b913      	cbnz	r3, 80015a6 <__sfp+0x16>
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff ffbd 	bl	8001520 <__sinit>
 80015a6:	3648      	adds	r6, #72	; 0x48
 80015a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	d503      	bpl.n	80015b8 <__sfp+0x28>
 80015b0:	6833      	ldr	r3, [r6, #0]
 80015b2:	b30b      	cbz	r3, 80015f8 <__sfp+0x68>
 80015b4:	6836      	ldr	r6, [r6, #0]
 80015b6:	e7f7      	b.n	80015a8 <__sfp+0x18>
 80015b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015bc:	b9d5      	cbnz	r5, 80015f4 <__sfp+0x64>
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <__sfp+0x88>)
 80015c0:	60e3      	str	r3, [r4, #12]
 80015c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015c6:	6665      	str	r5, [r4, #100]	; 0x64
 80015c8:	f000 f847 	bl	800165a <__retarget_lock_init_recursive>
 80015cc:	f7ff ff96 	bl	80014fc <__sfp_lock_release>
 80015d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80015d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80015d8:	6025      	str	r5, [r4, #0]
 80015da:	61a5      	str	r5, [r4, #24]
 80015dc:	2208      	movs	r2, #8
 80015de:	4629      	mov	r1, r5
 80015e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015e4:	f7ff ff24 	bl	8001430 <memset>
 80015e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015f0:	4620      	mov	r0, r4
 80015f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015f4:	3468      	adds	r4, #104	; 0x68
 80015f6:	e7d9      	b.n	80015ac <__sfp+0x1c>
 80015f8:	2104      	movs	r1, #4
 80015fa:	4638      	mov	r0, r7
 80015fc:	f7ff ff62 	bl	80014c4 <__sfmoreglue>
 8001600:	4604      	mov	r4, r0
 8001602:	6030      	str	r0, [r6, #0]
 8001604:	2800      	cmp	r0, #0
 8001606:	d1d5      	bne.n	80015b4 <__sfp+0x24>
 8001608:	f7ff ff78 	bl	80014fc <__sfp_lock_release>
 800160c:	230c      	movs	r3, #12
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	e7ee      	b.n	80015f0 <__sfp+0x60>
 8001612:	bf00      	nop
 8001614:	08002398 	.word	0x08002398
 8001618:	ffff0001 	.word	0xffff0001

0800161c <_fwalk_reent>:
 800161c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001620:	4606      	mov	r6, r0
 8001622:	4688      	mov	r8, r1
 8001624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001628:	2700      	movs	r7, #0
 800162a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800162e:	f1b9 0901 	subs.w	r9, r9, #1
 8001632:	d505      	bpl.n	8001640 <_fwalk_reent+0x24>
 8001634:	6824      	ldr	r4, [r4, #0]
 8001636:	2c00      	cmp	r4, #0
 8001638:	d1f7      	bne.n	800162a <_fwalk_reent+0xe>
 800163a:	4638      	mov	r0, r7
 800163c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001640:	89ab      	ldrh	r3, [r5, #12]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d907      	bls.n	8001656 <_fwalk_reent+0x3a>
 8001646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800164a:	3301      	adds	r3, #1
 800164c:	d003      	beq.n	8001656 <_fwalk_reent+0x3a>
 800164e:	4629      	mov	r1, r5
 8001650:	4630      	mov	r0, r6
 8001652:	47c0      	blx	r8
 8001654:	4307      	orrs	r7, r0
 8001656:	3568      	adds	r5, #104	; 0x68
 8001658:	e7e9      	b.n	800162e <_fwalk_reent+0x12>

0800165a <__retarget_lock_init_recursive>:
 800165a:	4770      	bx	lr

0800165c <__retarget_lock_acquire_recursive>:
 800165c:	4770      	bx	lr

0800165e <__retarget_lock_release_recursive>:
 800165e:	4770      	bx	lr

08001660 <_malloc_r>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	1ccd      	adds	r5, r1, #3
 8001664:	f025 0503 	bic.w	r5, r5, #3
 8001668:	3508      	adds	r5, #8
 800166a:	2d0c      	cmp	r5, #12
 800166c:	bf38      	it	cc
 800166e:	250c      	movcc	r5, #12
 8001670:	2d00      	cmp	r5, #0
 8001672:	4606      	mov	r6, r0
 8001674:	db01      	blt.n	800167a <_malloc_r+0x1a>
 8001676:	42a9      	cmp	r1, r5
 8001678:	d903      	bls.n	8001682 <_malloc_r+0x22>
 800167a:	230c      	movs	r3, #12
 800167c:	6033      	str	r3, [r6, #0]
 800167e:	2000      	movs	r0, #0
 8001680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001682:	f000 fda3 	bl	80021cc <__malloc_lock>
 8001686:	4921      	ldr	r1, [pc, #132]	; (800170c <_malloc_r+0xac>)
 8001688:	680a      	ldr	r2, [r1, #0]
 800168a:	4614      	mov	r4, r2
 800168c:	b99c      	cbnz	r4, 80016b6 <_malloc_r+0x56>
 800168e:	4f20      	ldr	r7, [pc, #128]	; (8001710 <_malloc_r+0xb0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b923      	cbnz	r3, 800169e <_malloc_r+0x3e>
 8001694:	4621      	mov	r1, r4
 8001696:	4630      	mov	r0, r6
 8001698:	f000 fb2a 	bl	8001cf0 <_sbrk_r>
 800169c:	6038      	str	r0, [r7, #0]
 800169e:	4629      	mov	r1, r5
 80016a0:	4630      	mov	r0, r6
 80016a2:	f000 fb25 	bl	8001cf0 <_sbrk_r>
 80016a6:	1c43      	adds	r3, r0, #1
 80016a8:	d123      	bne.n	80016f2 <_malloc_r+0x92>
 80016aa:	230c      	movs	r3, #12
 80016ac:	6033      	str	r3, [r6, #0]
 80016ae:	4630      	mov	r0, r6
 80016b0:	f000 fd92 	bl	80021d8 <__malloc_unlock>
 80016b4:	e7e3      	b.n	800167e <_malloc_r+0x1e>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	1b5b      	subs	r3, r3, r5
 80016ba:	d417      	bmi.n	80016ec <_malloc_r+0x8c>
 80016bc:	2b0b      	cmp	r3, #11
 80016be:	d903      	bls.n	80016c8 <_malloc_r+0x68>
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	441c      	add	r4, r3
 80016c4:	6025      	str	r5, [r4, #0]
 80016c6:	e004      	b.n	80016d2 <_malloc_r+0x72>
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	42a2      	cmp	r2, r4
 80016cc:	bf0c      	ite	eq
 80016ce:	600b      	streq	r3, [r1, #0]
 80016d0:	6053      	strne	r3, [r2, #4]
 80016d2:	4630      	mov	r0, r6
 80016d4:	f000 fd80 	bl	80021d8 <__malloc_unlock>
 80016d8:	f104 000b 	add.w	r0, r4, #11
 80016dc:	1d23      	adds	r3, r4, #4
 80016de:	f020 0007 	bic.w	r0, r0, #7
 80016e2:	1ac2      	subs	r2, r0, r3
 80016e4:	d0cc      	beq.n	8001680 <_malloc_r+0x20>
 80016e6:	1a1b      	subs	r3, r3, r0
 80016e8:	50a3      	str	r3, [r4, r2]
 80016ea:	e7c9      	b.n	8001680 <_malloc_r+0x20>
 80016ec:	4622      	mov	r2, r4
 80016ee:	6864      	ldr	r4, [r4, #4]
 80016f0:	e7cc      	b.n	800168c <_malloc_r+0x2c>
 80016f2:	1cc4      	adds	r4, r0, #3
 80016f4:	f024 0403 	bic.w	r4, r4, #3
 80016f8:	42a0      	cmp	r0, r4
 80016fa:	d0e3      	beq.n	80016c4 <_malloc_r+0x64>
 80016fc:	1a21      	subs	r1, r4, r0
 80016fe:	4630      	mov	r0, r6
 8001700:	f000 faf6 	bl	8001cf0 <_sbrk_r>
 8001704:	3001      	adds	r0, #1
 8001706:	d1dd      	bne.n	80016c4 <_malloc_r+0x64>
 8001708:	e7cf      	b.n	80016aa <_malloc_r+0x4a>
 800170a:	bf00      	nop
 800170c:	200000a4 	.word	0x200000a4
 8001710:	200000a8 	.word	0x200000a8

08001714 <__sfputc_r>:
 8001714:	6893      	ldr	r3, [r2, #8]
 8001716:	3b01      	subs	r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	b410      	push	{r4}
 800171c:	6093      	str	r3, [r2, #8]
 800171e:	da08      	bge.n	8001732 <__sfputc_r+0x1e>
 8001720:	6994      	ldr	r4, [r2, #24]
 8001722:	42a3      	cmp	r3, r4
 8001724:	db01      	blt.n	800172a <__sfputc_r+0x16>
 8001726:	290a      	cmp	r1, #10
 8001728:	d103      	bne.n	8001732 <__sfputc_r+0x1e>
 800172a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800172e:	f000 bb33 	b.w	8001d98 <__swbuf_r>
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	1c58      	adds	r0, r3, #1
 8001736:	6010      	str	r0, [r2, #0]
 8001738:	7019      	strb	r1, [r3, #0]
 800173a:	4608      	mov	r0, r1
 800173c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001740:	4770      	bx	lr

08001742 <__sfputs_r>:
 8001742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001744:	4606      	mov	r6, r0
 8001746:	460f      	mov	r7, r1
 8001748:	4614      	mov	r4, r2
 800174a:	18d5      	adds	r5, r2, r3
 800174c:	42ac      	cmp	r4, r5
 800174e:	d101      	bne.n	8001754 <__sfputs_r+0x12>
 8001750:	2000      	movs	r0, #0
 8001752:	e007      	b.n	8001764 <__sfputs_r+0x22>
 8001754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001758:	463a      	mov	r2, r7
 800175a:	4630      	mov	r0, r6
 800175c:	f7ff ffda 	bl	8001714 <__sfputc_r>
 8001760:	1c43      	adds	r3, r0, #1
 8001762:	d1f3      	bne.n	800174c <__sfputs_r+0xa>
 8001764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001768 <_vfiprintf_r>:
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	460d      	mov	r5, r1
 800176e:	b09d      	sub	sp, #116	; 0x74
 8001770:	4614      	mov	r4, r2
 8001772:	4698      	mov	r8, r3
 8001774:	4606      	mov	r6, r0
 8001776:	b118      	cbz	r0, 8001780 <_vfiprintf_r+0x18>
 8001778:	6983      	ldr	r3, [r0, #24]
 800177a:	b90b      	cbnz	r3, 8001780 <_vfiprintf_r+0x18>
 800177c:	f7ff fed0 	bl	8001520 <__sinit>
 8001780:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <_vfiprintf_r+0x240>)
 8001782:	429d      	cmp	r5, r3
 8001784:	d11b      	bne.n	80017be <_vfiprintf_r+0x56>
 8001786:	6875      	ldr	r5, [r6, #4]
 8001788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800178a:	07d9      	lsls	r1, r3, #31
 800178c:	d405      	bmi.n	800179a <_vfiprintf_r+0x32>
 800178e:	89ab      	ldrh	r3, [r5, #12]
 8001790:	059a      	lsls	r2, r3, #22
 8001792:	d402      	bmi.n	800179a <_vfiprintf_r+0x32>
 8001794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001796:	f7ff ff61 	bl	800165c <__retarget_lock_acquire_recursive>
 800179a:	89ab      	ldrh	r3, [r5, #12]
 800179c:	071b      	lsls	r3, r3, #28
 800179e:	d501      	bpl.n	80017a4 <_vfiprintf_r+0x3c>
 80017a0:	692b      	ldr	r3, [r5, #16]
 80017a2:	b9eb      	cbnz	r3, 80017e0 <_vfiprintf_r+0x78>
 80017a4:	4629      	mov	r1, r5
 80017a6:	4630      	mov	r0, r6
 80017a8:	f000 fb5a 	bl	8001e60 <__swsetup_r>
 80017ac:	b1c0      	cbz	r0, 80017e0 <_vfiprintf_r+0x78>
 80017ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017b0:	07dc      	lsls	r4, r3, #31
 80017b2:	d50e      	bpl.n	80017d2 <_vfiprintf_r+0x6a>
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b8:	b01d      	add	sp, #116	; 0x74
 80017ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <_vfiprintf_r+0x244>)
 80017c0:	429d      	cmp	r5, r3
 80017c2:	d101      	bne.n	80017c8 <_vfiprintf_r+0x60>
 80017c4:	68b5      	ldr	r5, [r6, #8]
 80017c6:	e7df      	b.n	8001788 <_vfiprintf_r+0x20>
 80017c8:	4b79      	ldr	r3, [pc, #484]	; (80019b0 <_vfiprintf_r+0x248>)
 80017ca:	429d      	cmp	r5, r3
 80017cc:	bf08      	it	eq
 80017ce:	68f5      	ldreq	r5, [r6, #12]
 80017d0:	e7da      	b.n	8001788 <_vfiprintf_r+0x20>
 80017d2:	89ab      	ldrh	r3, [r5, #12]
 80017d4:	0598      	lsls	r0, r3, #22
 80017d6:	d4ed      	bmi.n	80017b4 <_vfiprintf_r+0x4c>
 80017d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017da:	f7ff ff40 	bl	800165e <__retarget_lock_release_recursive>
 80017de:	e7e9      	b.n	80017b4 <_vfiprintf_r+0x4c>
 80017e0:	2300      	movs	r3, #0
 80017e2:	9309      	str	r3, [sp, #36]	; 0x24
 80017e4:	2320      	movs	r3, #32
 80017e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80017ee:	2330      	movs	r3, #48	; 0x30
 80017f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80019b4 <_vfiprintf_r+0x24c>
 80017f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017f8:	f04f 0901 	mov.w	r9, #1
 80017fc:	4623      	mov	r3, r4
 80017fe:	469a      	mov	sl, r3
 8001800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001804:	b10a      	cbz	r2, 800180a <_vfiprintf_r+0xa2>
 8001806:	2a25      	cmp	r2, #37	; 0x25
 8001808:	d1f9      	bne.n	80017fe <_vfiprintf_r+0x96>
 800180a:	ebba 0b04 	subs.w	fp, sl, r4
 800180e:	d00b      	beq.n	8001828 <_vfiprintf_r+0xc0>
 8001810:	465b      	mov	r3, fp
 8001812:	4622      	mov	r2, r4
 8001814:	4629      	mov	r1, r5
 8001816:	4630      	mov	r0, r6
 8001818:	f7ff ff93 	bl	8001742 <__sfputs_r>
 800181c:	3001      	adds	r0, #1
 800181e:	f000 80aa 	beq.w	8001976 <_vfiprintf_r+0x20e>
 8001822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001824:	445a      	add	r2, fp
 8001826:	9209      	str	r2, [sp, #36]	; 0x24
 8001828:	f89a 3000 	ldrb.w	r3, [sl]
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80a2 	beq.w	8001976 <_vfiprintf_r+0x20e>
 8001832:	2300      	movs	r3, #0
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800183c:	f10a 0a01 	add.w	sl, sl, #1
 8001840:	9304      	str	r3, [sp, #16]
 8001842:	9307      	str	r3, [sp, #28]
 8001844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001848:	931a      	str	r3, [sp, #104]	; 0x68
 800184a:	4654      	mov	r4, sl
 800184c:	2205      	movs	r2, #5
 800184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001852:	4858      	ldr	r0, [pc, #352]	; (80019b4 <_vfiprintf_r+0x24c>)
 8001854:	f7fe fccc 	bl	80001f0 <memchr>
 8001858:	9a04      	ldr	r2, [sp, #16]
 800185a:	b9d8      	cbnz	r0, 8001894 <_vfiprintf_r+0x12c>
 800185c:	06d1      	lsls	r1, r2, #27
 800185e:	bf44      	itt	mi
 8001860:	2320      	movmi	r3, #32
 8001862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001866:	0713      	lsls	r3, r2, #28
 8001868:	bf44      	itt	mi
 800186a:	232b      	movmi	r3, #43	; 0x2b
 800186c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001870:	f89a 3000 	ldrb.w	r3, [sl]
 8001874:	2b2a      	cmp	r3, #42	; 0x2a
 8001876:	d015      	beq.n	80018a4 <_vfiprintf_r+0x13c>
 8001878:	9a07      	ldr	r2, [sp, #28]
 800187a:	4654      	mov	r4, sl
 800187c:	2000      	movs	r0, #0
 800187e:	f04f 0c0a 	mov.w	ip, #10
 8001882:	4621      	mov	r1, r4
 8001884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001888:	3b30      	subs	r3, #48	; 0x30
 800188a:	2b09      	cmp	r3, #9
 800188c:	d94e      	bls.n	800192c <_vfiprintf_r+0x1c4>
 800188e:	b1b0      	cbz	r0, 80018be <_vfiprintf_r+0x156>
 8001890:	9207      	str	r2, [sp, #28]
 8001892:	e014      	b.n	80018be <_vfiprintf_r+0x156>
 8001894:	eba0 0308 	sub.w	r3, r0, r8
 8001898:	fa09 f303 	lsl.w	r3, r9, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	9304      	str	r3, [sp, #16]
 80018a0:	46a2      	mov	sl, r4
 80018a2:	e7d2      	b.n	800184a <_vfiprintf_r+0xe2>
 80018a4:	9b03      	ldr	r3, [sp, #12]
 80018a6:	1d19      	adds	r1, r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	9103      	str	r1, [sp, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bfbb      	ittet	lt
 80018b0:	425b      	neglt	r3, r3
 80018b2:	f042 0202 	orrlt.w	r2, r2, #2
 80018b6:	9307      	strge	r3, [sp, #28]
 80018b8:	9307      	strlt	r3, [sp, #28]
 80018ba:	bfb8      	it	lt
 80018bc:	9204      	strlt	r2, [sp, #16]
 80018be:	7823      	ldrb	r3, [r4, #0]
 80018c0:	2b2e      	cmp	r3, #46	; 0x2e
 80018c2:	d10c      	bne.n	80018de <_vfiprintf_r+0x176>
 80018c4:	7863      	ldrb	r3, [r4, #1]
 80018c6:	2b2a      	cmp	r3, #42	; 0x2a
 80018c8:	d135      	bne.n	8001936 <_vfiprintf_r+0x1ce>
 80018ca:	9b03      	ldr	r3, [sp, #12]
 80018cc:	1d1a      	adds	r2, r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	9203      	str	r2, [sp, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bfb8      	it	lt
 80018d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80018da:	3402      	adds	r4, #2
 80018dc:	9305      	str	r3, [sp, #20]
 80018de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80019c4 <_vfiprintf_r+0x25c>
 80018e2:	7821      	ldrb	r1, [r4, #0]
 80018e4:	2203      	movs	r2, #3
 80018e6:	4650      	mov	r0, sl
 80018e8:	f7fe fc82 	bl	80001f0 <memchr>
 80018ec:	b140      	cbz	r0, 8001900 <_vfiprintf_r+0x198>
 80018ee:	2340      	movs	r3, #64	; 0x40
 80018f0:	eba0 000a 	sub.w	r0, r0, sl
 80018f4:	fa03 f000 	lsl.w	r0, r3, r0
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	4303      	orrs	r3, r0
 80018fc:	3401      	adds	r4, #1
 80018fe:	9304      	str	r3, [sp, #16]
 8001900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001904:	482c      	ldr	r0, [pc, #176]	; (80019b8 <_vfiprintf_r+0x250>)
 8001906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800190a:	2206      	movs	r2, #6
 800190c:	f7fe fc70 	bl	80001f0 <memchr>
 8001910:	2800      	cmp	r0, #0
 8001912:	d03f      	beq.n	8001994 <_vfiprintf_r+0x22c>
 8001914:	4b29      	ldr	r3, [pc, #164]	; (80019bc <_vfiprintf_r+0x254>)
 8001916:	bb1b      	cbnz	r3, 8001960 <_vfiprintf_r+0x1f8>
 8001918:	9b03      	ldr	r3, [sp, #12]
 800191a:	3307      	adds	r3, #7
 800191c:	f023 0307 	bic.w	r3, r3, #7
 8001920:	3308      	adds	r3, #8
 8001922:	9303      	str	r3, [sp, #12]
 8001924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001926:	443b      	add	r3, r7
 8001928:	9309      	str	r3, [sp, #36]	; 0x24
 800192a:	e767      	b.n	80017fc <_vfiprintf_r+0x94>
 800192c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001930:	460c      	mov	r4, r1
 8001932:	2001      	movs	r0, #1
 8001934:	e7a5      	b.n	8001882 <_vfiprintf_r+0x11a>
 8001936:	2300      	movs	r3, #0
 8001938:	3401      	adds	r4, #1
 800193a:	9305      	str	r3, [sp, #20]
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0c0a 	mov.w	ip, #10
 8001942:	4620      	mov	r0, r4
 8001944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001948:	3a30      	subs	r2, #48	; 0x30
 800194a:	2a09      	cmp	r2, #9
 800194c:	d903      	bls.n	8001956 <_vfiprintf_r+0x1ee>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0c5      	beq.n	80018de <_vfiprintf_r+0x176>
 8001952:	9105      	str	r1, [sp, #20]
 8001954:	e7c3      	b.n	80018de <_vfiprintf_r+0x176>
 8001956:	fb0c 2101 	mla	r1, ip, r1, r2
 800195a:	4604      	mov	r4, r0
 800195c:	2301      	movs	r3, #1
 800195e:	e7f0      	b.n	8001942 <_vfiprintf_r+0x1da>
 8001960:	ab03      	add	r3, sp, #12
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	462a      	mov	r2, r5
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <_vfiprintf_r+0x258>)
 8001968:	a904      	add	r1, sp, #16
 800196a:	4630      	mov	r0, r6
 800196c:	f3af 8000 	nop.w
 8001970:	4607      	mov	r7, r0
 8001972:	1c78      	adds	r0, r7, #1
 8001974:	d1d6      	bne.n	8001924 <_vfiprintf_r+0x1bc>
 8001976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001978:	07d9      	lsls	r1, r3, #31
 800197a:	d405      	bmi.n	8001988 <_vfiprintf_r+0x220>
 800197c:	89ab      	ldrh	r3, [r5, #12]
 800197e:	059a      	lsls	r2, r3, #22
 8001980:	d402      	bmi.n	8001988 <_vfiprintf_r+0x220>
 8001982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001984:	f7ff fe6b 	bl	800165e <__retarget_lock_release_recursive>
 8001988:	89ab      	ldrh	r3, [r5, #12]
 800198a:	065b      	lsls	r3, r3, #25
 800198c:	f53f af12 	bmi.w	80017b4 <_vfiprintf_r+0x4c>
 8001990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001992:	e711      	b.n	80017b8 <_vfiprintf_r+0x50>
 8001994:	ab03      	add	r3, sp, #12
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	462a      	mov	r2, r5
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <_vfiprintf_r+0x258>)
 800199c:	a904      	add	r1, sp, #16
 800199e:	4630      	mov	r0, r6
 80019a0:	f000 f880 	bl	8001aa4 <_printf_i>
 80019a4:	e7e4      	b.n	8001970 <_vfiprintf_r+0x208>
 80019a6:	bf00      	nop
 80019a8:	080023bc 	.word	0x080023bc
 80019ac:	080023dc 	.word	0x080023dc
 80019b0:	0800239c 	.word	0x0800239c
 80019b4:	080023fc 	.word	0x080023fc
 80019b8:	08002406 	.word	0x08002406
 80019bc:	00000000 	.word	0x00000000
 80019c0:	08001743 	.word	0x08001743
 80019c4:	08002402 	.word	0x08002402

080019c8 <_printf_common>:
 80019c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019cc:	4616      	mov	r6, r2
 80019ce:	4699      	mov	r9, r3
 80019d0:	688a      	ldr	r2, [r1, #8]
 80019d2:	690b      	ldr	r3, [r1, #16]
 80019d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019d8:	4293      	cmp	r3, r2
 80019da:	bfb8      	it	lt
 80019dc:	4613      	movlt	r3, r2
 80019de:	6033      	str	r3, [r6, #0]
 80019e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019e4:	4607      	mov	r7, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	b10a      	cbz	r2, 80019ee <_printf_common+0x26>
 80019ea:	3301      	adds	r3, #1
 80019ec:	6033      	str	r3, [r6, #0]
 80019ee:	6823      	ldr	r3, [r4, #0]
 80019f0:	0699      	lsls	r1, r3, #26
 80019f2:	bf42      	ittt	mi
 80019f4:	6833      	ldrmi	r3, [r6, #0]
 80019f6:	3302      	addmi	r3, #2
 80019f8:	6033      	strmi	r3, [r6, #0]
 80019fa:	6825      	ldr	r5, [r4, #0]
 80019fc:	f015 0506 	ands.w	r5, r5, #6
 8001a00:	d106      	bne.n	8001a10 <_printf_common+0x48>
 8001a02:	f104 0a19 	add.w	sl, r4, #25
 8001a06:	68e3      	ldr	r3, [r4, #12]
 8001a08:	6832      	ldr	r2, [r6, #0]
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	42ab      	cmp	r3, r5
 8001a0e:	dc26      	bgt.n	8001a5e <_printf_common+0x96>
 8001a10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a14:	1e13      	subs	r3, r2, #0
 8001a16:	6822      	ldr	r2, [r4, #0]
 8001a18:	bf18      	it	ne
 8001a1a:	2301      	movne	r3, #1
 8001a1c:	0692      	lsls	r2, r2, #26
 8001a1e:	d42b      	bmi.n	8001a78 <_printf_common+0xb0>
 8001a20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a24:	4649      	mov	r1, r9
 8001a26:	4638      	mov	r0, r7
 8001a28:	47c0      	blx	r8
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	d01e      	beq.n	8001a6c <_printf_common+0xa4>
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	68e5      	ldr	r5, [r4, #12]
 8001a32:	6832      	ldr	r2, [r6, #0]
 8001a34:	f003 0306 	and.w	r3, r3, #6
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	bf08      	it	eq
 8001a3c:	1aad      	subeq	r5, r5, r2
 8001a3e:	68a3      	ldr	r3, [r4, #8]
 8001a40:	6922      	ldr	r2, [r4, #16]
 8001a42:	bf0c      	ite	eq
 8001a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a48:	2500      	movne	r5, #0
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	bfc4      	itt	gt
 8001a4e:	1a9b      	subgt	r3, r3, r2
 8001a50:	18ed      	addgt	r5, r5, r3
 8001a52:	2600      	movs	r6, #0
 8001a54:	341a      	adds	r4, #26
 8001a56:	42b5      	cmp	r5, r6
 8001a58:	d11a      	bne.n	8001a90 <_printf_common+0xc8>
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	e008      	b.n	8001a70 <_printf_common+0xa8>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4652      	mov	r2, sl
 8001a62:	4649      	mov	r1, r9
 8001a64:	4638      	mov	r0, r7
 8001a66:	47c0      	blx	r8
 8001a68:	3001      	adds	r0, #1
 8001a6a:	d103      	bne.n	8001a74 <_printf_common+0xac>
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a74:	3501      	adds	r5, #1
 8001a76:	e7c6      	b.n	8001a06 <_printf_common+0x3e>
 8001a78:	18e1      	adds	r1, r4, r3
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	2030      	movs	r0, #48	; 0x30
 8001a7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a82:	4422      	add	r2, r4
 8001a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	e7c7      	b.n	8001a20 <_printf_common+0x58>
 8001a90:	2301      	movs	r3, #1
 8001a92:	4622      	mov	r2, r4
 8001a94:	4649      	mov	r1, r9
 8001a96:	4638      	mov	r0, r7
 8001a98:	47c0      	blx	r8
 8001a9a:	3001      	adds	r0, #1
 8001a9c:	d0e6      	beq.n	8001a6c <_printf_common+0xa4>
 8001a9e:	3601      	adds	r6, #1
 8001aa0:	e7d9      	b.n	8001a56 <_printf_common+0x8e>
	...

08001aa4 <_printf_i>:
 8001aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa8:	460c      	mov	r4, r1
 8001aaa:	4691      	mov	r9, r2
 8001aac:	7e27      	ldrb	r7, [r4, #24]
 8001aae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ab0:	2f78      	cmp	r7, #120	; 0x78
 8001ab2:	4680      	mov	r8, r0
 8001ab4:	469a      	mov	sl, r3
 8001ab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aba:	d807      	bhi.n	8001acc <_printf_i+0x28>
 8001abc:	2f62      	cmp	r7, #98	; 0x62
 8001abe:	d80a      	bhi.n	8001ad6 <_printf_i+0x32>
 8001ac0:	2f00      	cmp	r7, #0
 8001ac2:	f000 80d8 	beq.w	8001c76 <_printf_i+0x1d2>
 8001ac6:	2f58      	cmp	r7, #88	; 0x58
 8001ac8:	f000 80a3 	beq.w	8001c12 <_printf_i+0x16e>
 8001acc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ad4:	e03a      	b.n	8001b4c <_printf_i+0xa8>
 8001ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ada:	2b15      	cmp	r3, #21
 8001adc:	d8f6      	bhi.n	8001acc <_printf_i+0x28>
 8001ade:	a001      	add	r0, pc, #4	; (adr r0, 8001ae4 <_printf_i+0x40>)
 8001ae0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ae4:	08001b3d 	.word	0x08001b3d
 8001ae8:	08001b51 	.word	0x08001b51
 8001aec:	08001acd 	.word	0x08001acd
 8001af0:	08001acd 	.word	0x08001acd
 8001af4:	08001acd 	.word	0x08001acd
 8001af8:	08001acd 	.word	0x08001acd
 8001afc:	08001b51 	.word	0x08001b51
 8001b00:	08001acd 	.word	0x08001acd
 8001b04:	08001acd 	.word	0x08001acd
 8001b08:	08001acd 	.word	0x08001acd
 8001b0c:	08001acd 	.word	0x08001acd
 8001b10:	08001c5d 	.word	0x08001c5d
 8001b14:	08001b81 	.word	0x08001b81
 8001b18:	08001c3f 	.word	0x08001c3f
 8001b1c:	08001acd 	.word	0x08001acd
 8001b20:	08001acd 	.word	0x08001acd
 8001b24:	08001c7f 	.word	0x08001c7f
 8001b28:	08001acd 	.word	0x08001acd
 8001b2c:	08001b81 	.word	0x08001b81
 8001b30:	08001acd 	.word	0x08001acd
 8001b34:	08001acd 	.word	0x08001acd
 8001b38:	08001c47 	.word	0x08001c47
 8001b3c:	680b      	ldr	r3, [r1, #0]
 8001b3e:	1d1a      	adds	r2, r3, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	600a      	str	r2, [r1, #0]
 8001b44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0a3      	b.n	8001c98 <_printf_i+0x1f4>
 8001b50:	6825      	ldr	r5, [r4, #0]
 8001b52:	6808      	ldr	r0, [r1, #0]
 8001b54:	062e      	lsls	r6, r5, #24
 8001b56:	f100 0304 	add.w	r3, r0, #4
 8001b5a:	d50a      	bpl.n	8001b72 <_printf_i+0xce>
 8001b5c:	6805      	ldr	r5, [r0, #0]
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	2d00      	cmp	r5, #0
 8001b62:	da03      	bge.n	8001b6c <_printf_i+0xc8>
 8001b64:	232d      	movs	r3, #45	; 0x2d
 8001b66:	426d      	negs	r5, r5
 8001b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b6c:	485e      	ldr	r0, [pc, #376]	; (8001ce8 <_printf_i+0x244>)
 8001b6e:	230a      	movs	r3, #10
 8001b70:	e019      	b.n	8001ba6 <_printf_i+0x102>
 8001b72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001b76:	6805      	ldr	r5, [r0, #0]
 8001b78:	600b      	str	r3, [r1, #0]
 8001b7a:	bf18      	it	ne
 8001b7c:	b22d      	sxthne	r5, r5
 8001b7e:	e7ef      	b.n	8001b60 <_printf_i+0xbc>
 8001b80:	680b      	ldr	r3, [r1, #0]
 8001b82:	6825      	ldr	r5, [r4, #0]
 8001b84:	1d18      	adds	r0, r3, #4
 8001b86:	6008      	str	r0, [r1, #0]
 8001b88:	0628      	lsls	r0, r5, #24
 8001b8a:	d501      	bpl.n	8001b90 <_printf_i+0xec>
 8001b8c:	681d      	ldr	r5, [r3, #0]
 8001b8e:	e002      	b.n	8001b96 <_printf_i+0xf2>
 8001b90:	0669      	lsls	r1, r5, #25
 8001b92:	d5fb      	bpl.n	8001b8c <_printf_i+0xe8>
 8001b94:	881d      	ldrh	r5, [r3, #0]
 8001b96:	4854      	ldr	r0, [pc, #336]	; (8001ce8 <_printf_i+0x244>)
 8001b98:	2f6f      	cmp	r7, #111	; 0x6f
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2308      	moveq	r3, #8
 8001b9e:	230a      	movne	r3, #10
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ba6:	6866      	ldr	r6, [r4, #4]
 8001ba8:	60a6      	str	r6, [r4, #8]
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	bfa2      	ittt	ge
 8001bae:	6821      	ldrge	r1, [r4, #0]
 8001bb0:	f021 0104 	bicge.w	r1, r1, #4
 8001bb4:	6021      	strge	r1, [r4, #0]
 8001bb6:	b90d      	cbnz	r5, 8001bbc <_printf_i+0x118>
 8001bb8:	2e00      	cmp	r6, #0
 8001bba:	d04d      	beq.n	8001c58 <_printf_i+0x1b4>
 8001bbc:	4616      	mov	r6, r2
 8001bbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bc2:	fb03 5711 	mls	r7, r3, r1, r5
 8001bc6:	5dc7      	ldrb	r7, [r0, r7]
 8001bc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001bcc:	462f      	mov	r7, r5
 8001bce:	42bb      	cmp	r3, r7
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	d9f4      	bls.n	8001bbe <_printf_i+0x11a>
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d10b      	bne.n	8001bf0 <_printf_i+0x14c>
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	07df      	lsls	r7, r3, #31
 8001bdc:	d508      	bpl.n	8001bf0 <_printf_i+0x14c>
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	6861      	ldr	r1, [r4, #4]
 8001be2:	4299      	cmp	r1, r3
 8001be4:	bfde      	ittt	le
 8001be6:	2330      	movle	r3, #48	; 0x30
 8001be8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001bec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8001bf0:	1b92      	subs	r2, r2, r6
 8001bf2:	6122      	str	r2, [r4, #16]
 8001bf4:	f8cd a000 	str.w	sl, [sp]
 8001bf8:	464b      	mov	r3, r9
 8001bfa:	aa03      	add	r2, sp, #12
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	4640      	mov	r0, r8
 8001c00:	f7ff fee2 	bl	80019c8 <_printf_common>
 8001c04:	3001      	adds	r0, #1
 8001c06:	d14c      	bne.n	8001ca2 <_printf_i+0x1fe>
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c0c:	b004      	add	sp, #16
 8001c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c12:	4835      	ldr	r0, [pc, #212]	; (8001ce8 <_printf_i+0x244>)
 8001c14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	680e      	ldr	r6, [r1, #0]
 8001c1c:	061f      	lsls	r7, r3, #24
 8001c1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001c22:	600e      	str	r6, [r1, #0]
 8001c24:	d514      	bpl.n	8001c50 <_printf_i+0x1ac>
 8001c26:	07d9      	lsls	r1, r3, #31
 8001c28:	bf44      	itt	mi
 8001c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8001c2e:	6023      	strmi	r3, [r4, #0]
 8001c30:	b91d      	cbnz	r5, 8001c3a <_printf_i+0x196>
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	f023 0320 	bic.w	r3, r3, #32
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	e7b0      	b.n	8001ba0 <_printf_i+0xfc>
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	2378      	movs	r3, #120	; 0x78
 8001c48:	4828      	ldr	r0, [pc, #160]	; (8001cec <_printf_i+0x248>)
 8001c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c4e:	e7e3      	b.n	8001c18 <_printf_i+0x174>
 8001c50:	065e      	lsls	r6, r3, #25
 8001c52:	bf48      	it	mi
 8001c54:	b2ad      	uxthmi	r5, r5
 8001c56:	e7e6      	b.n	8001c26 <_printf_i+0x182>
 8001c58:	4616      	mov	r6, r2
 8001c5a:	e7bb      	b.n	8001bd4 <_printf_i+0x130>
 8001c5c:	680b      	ldr	r3, [r1, #0]
 8001c5e:	6826      	ldr	r6, [r4, #0]
 8001c60:	6960      	ldr	r0, [r4, #20]
 8001c62:	1d1d      	adds	r5, r3, #4
 8001c64:	600d      	str	r5, [r1, #0]
 8001c66:	0635      	lsls	r5, r6, #24
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	d501      	bpl.n	8001c70 <_printf_i+0x1cc>
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	e002      	b.n	8001c76 <_printf_i+0x1d2>
 8001c70:	0671      	lsls	r1, r6, #25
 8001c72:	d5fb      	bpl.n	8001c6c <_printf_i+0x1c8>
 8001c74:	8018      	strh	r0, [r3, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	6123      	str	r3, [r4, #16]
 8001c7a:	4616      	mov	r6, r2
 8001c7c:	e7ba      	b.n	8001bf4 <_printf_i+0x150>
 8001c7e:	680b      	ldr	r3, [r1, #0]
 8001c80:	1d1a      	adds	r2, r3, #4
 8001c82:	600a      	str	r2, [r1, #0]
 8001c84:	681e      	ldr	r6, [r3, #0]
 8001c86:	6862      	ldr	r2, [r4, #4]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7fe fab0 	bl	80001f0 <memchr>
 8001c90:	b108      	cbz	r0, 8001c96 <_printf_i+0x1f2>
 8001c92:	1b80      	subs	r0, r0, r6
 8001c94:	6060      	str	r0, [r4, #4]
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	6123      	str	r3, [r4, #16]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ca0:	e7a8      	b.n	8001bf4 <_printf_i+0x150>
 8001ca2:	6923      	ldr	r3, [r4, #16]
 8001ca4:	4632      	mov	r2, r6
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	4640      	mov	r0, r8
 8001caa:	47d0      	blx	sl
 8001cac:	3001      	adds	r0, #1
 8001cae:	d0ab      	beq.n	8001c08 <_printf_i+0x164>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	079b      	lsls	r3, r3, #30
 8001cb4:	d413      	bmi.n	8001cde <_printf_i+0x23a>
 8001cb6:	68e0      	ldr	r0, [r4, #12]
 8001cb8:	9b03      	ldr	r3, [sp, #12]
 8001cba:	4298      	cmp	r0, r3
 8001cbc:	bfb8      	it	lt
 8001cbe:	4618      	movlt	r0, r3
 8001cc0:	e7a4      	b.n	8001c0c <_printf_i+0x168>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	4632      	mov	r2, r6
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	4640      	mov	r0, r8
 8001cca:	47d0      	blx	sl
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d09b      	beq.n	8001c08 <_printf_i+0x164>
 8001cd0:	3501      	adds	r5, #1
 8001cd2:	68e3      	ldr	r3, [r4, #12]
 8001cd4:	9903      	ldr	r1, [sp, #12]
 8001cd6:	1a5b      	subs	r3, r3, r1
 8001cd8:	42ab      	cmp	r3, r5
 8001cda:	dcf2      	bgt.n	8001cc2 <_printf_i+0x21e>
 8001cdc:	e7eb      	b.n	8001cb6 <_printf_i+0x212>
 8001cde:	2500      	movs	r5, #0
 8001ce0:	f104 0619 	add.w	r6, r4, #25
 8001ce4:	e7f5      	b.n	8001cd2 <_printf_i+0x22e>
 8001ce6:	bf00      	nop
 8001ce8:	0800240d 	.word	0x0800240d
 8001cec:	0800241e 	.word	0x0800241e

08001cf0 <_sbrk_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4d06      	ldr	r5, [pc, #24]	; (8001d0c <_sbrk_r+0x1c>)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	602b      	str	r3, [r5, #0]
 8001cfc:	f7ff fa72 	bl	80011e4 <_sbrk>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d102      	bne.n	8001d0a <_sbrk_r+0x1a>
 8001d04:	682b      	ldr	r3, [r5, #0]
 8001d06:	b103      	cbz	r3, 8001d0a <_sbrk_r+0x1a>
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
 8001d0c:	20000100 	.word	0x20000100

08001d10 <__sread>:
 8001d10:	b510      	push	{r4, lr}
 8001d12:	460c      	mov	r4, r1
 8001d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d18:	f000 fab4 	bl	8002284 <_read_r>
 8001d1c:	2800      	cmp	r0, #0
 8001d1e:	bfab      	itete	ge
 8001d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d22:	89a3      	ldrhlt	r3, [r4, #12]
 8001d24:	181b      	addge	r3, r3, r0
 8001d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d2a:	bfac      	ite	ge
 8001d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d2e:	81a3      	strhlt	r3, [r4, #12]
 8001d30:	bd10      	pop	{r4, pc}

08001d32 <__swrite>:
 8001d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d36:	461f      	mov	r7, r3
 8001d38:	898b      	ldrh	r3, [r1, #12]
 8001d3a:	05db      	lsls	r3, r3, #23
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	4616      	mov	r6, r2
 8001d42:	d505      	bpl.n	8001d50 <__swrite+0x1e>
 8001d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f000 f9c8 	bl	80020e0 <_lseek_r>
 8001d50:	89a3      	ldrh	r3, [r4, #12]
 8001d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d5a:	81a3      	strh	r3, [r4, #12]
 8001d5c:	4632      	mov	r2, r6
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4628      	mov	r0, r5
 8001d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d66:	f000 b869 	b.w	8001e3c <_write_r>

08001d6a <__sseek>:
 8001d6a:	b510      	push	{r4, lr}
 8001d6c:	460c      	mov	r4, r1
 8001d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d72:	f000 f9b5 	bl	80020e0 <_lseek_r>
 8001d76:	1c43      	adds	r3, r0, #1
 8001d78:	89a3      	ldrh	r3, [r4, #12]
 8001d7a:	bf15      	itete	ne
 8001d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d86:	81a3      	strheq	r3, [r4, #12]
 8001d88:	bf18      	it	ne
 8001d8a:	81a3      	strhne	r3, [r4, #12]
 8001d8c:	bd10      	pop	{r4, pc}

08001d8e <__sclose>:
 8001d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d92:	f000 b8d3 	b.w	8001f3c <_close_r>
	...

08001d98 <__swbuf_r>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	460e      	mov	r6, r1
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	4605      	mov	r5, r0
 8001da0:	b118      	cbz	r0, 8001daa <__swbuf_r+0x12>
 8001da2:	6983      	ldr	r3, [r0, #24]
 8001da4:	b90b      	cbnz	r3, 8001daa <__swbuf_r+0x12>
 8001da6:	f7ff fbbb 	bl	8001520 <__sinit>
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <__swbuf_r+0x98>)
 8001dac:	429c      	cmp	r4, r3
 8001dae:	d12b      	bne.n	8001e08 <__swbuf_r+0x70>
 8001db0:	686c      	ldr	r4, [r5, #4]
 8001db2:	69a3      	ldr	r3, [r4, #24]
 8001db4:	60a3      	str	r3, [r4, #8]
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	071a      	lsls	r2, r3, #28
 8001dba:	d52f      	bpl.n	8001e1c <__swbuf_r+0x84>
 8001dbc:	6923      	ldr	r3, [r4, #16]
 8001dbe:	b36b      	cbz	r3, 8001e1c <__swbuf_r+0x84>
 8001dc0:	6923      	ldr	r3, [r4, #16]
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	1ac0      	subs	r0, r0, r3
 8001dc6:	6963      	ldr	r3, [r4, #20]
 8001dc8:	b2f6      	uxtb	r6, r6
 8001dca:	4283      	cmp	r3, r0
 8001dcc:	4637      	mov	r7, r6
 8001dce:	dc04      	bgt.n	8001dda <__swbuf_r+0x42>
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f000 f948 	bl	8002068 <_fflush_r>
 8001dd8:	bb30      	cbnz	r0, 8001e28 <__swbuf_r+0x90>
 8001dda:	68a3      	ldr	r3, [r4, #8]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60a3      	str	r3, [r4, #8]
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	6022      	str	r2, [r4, #0]
 8001de6:	701e      	strb	r6, [r3, #0]
 8001de8:	6963      	ldr	r3, [r4, #20]
 8001dea:	3001      	adds	r0, #1
 8001dec:	4283      	cmp	r3, r0
 8001dee:	d004      	beq.n	8001dfa <__swbuf_r+0x62>
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	07db      	lsls	r3, r3, #31
 8001df4:	d506      	bpl.n	8001e04 <__swbuf_r+0x6c>
 8001df6:	2e0a      	cmp	r6, #10
 8001df8:	d104      	bne.n	8001e04 <__swbuf_r+0x6c>
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f000 f933 	bl	8002068 <_fflush_r>
 8001e02:	b988      	cbnz	r0, 8001e28 <__swbuf_r+0x90>
 8001e04:	4638      	mov	r0, r7
 8001e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <__swbuf_r+0x9c>)
 8001e0a:	429c      	cmp	r4, r3
 8001e0c:	d101      	bne.n	8001e12 <__swbuf_r+0x7a>
 8001e0e:	68ac      	ldr	r4, [r5, #8]
 8001e10:	e7cf      	b.n	8001db2 <__swbuf_r+0x1a>
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <__swbuf_r+0xa0>)
 8001e14:	429c      	cmp	r4, r3
 8001e16:	bf08      	it	eq
 8001e18:	68ec      	ldreq	r4, [r5, #12]
 8001e1a:	e7ca      	b.n	8001db2 <__swbuf_r+0x1a>
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f000 f81e 	bl	8001e60 <__swsetup_r>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d0cb      	beq.n	8001dc0 <__swbuf_r+0x28>
 8001e28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001e2c:	e7ea      	b.n	8001e04 <__swbuf_r+0x6c>
 8001e2e:	bf00      	nop
 8001e30:	080023bc 	.word	0x080023bc
 8001e34:	080023dc 	.word	0x080023dc
 8001e38:	0800239c 	.word	0x0800239c

08001e3c <_write_r>:
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	4d07      	ldr	r5, [pc, #28]	; (8001e5c <_write_r+0x20>)
 8001e40:	4604      	mov	r4, r0
 8001e42:	4608      	mov	r0, r1
 8001e44:	4611      	mov	r1, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	602a      	str	r2, [r5, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f7ff f9bc 	bl	80011c8 <_write>
 8001e50:	1c43      	adds	r3, r0, #1
 8001e52:	d102      	bne.n	8001e5a <_write_r+0x1e>
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	b103      	cbz	r3, 8001e5a <_write_r+0x1e>
 8001e58:	6023      	str	r3, [r4, #0]
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	20000100 	.word	0x20000100

08001e60 <__swsetup_r>:
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <__swsetup_r+0xcc>)
 8001e62:	b570      	push	{r4, r5, r6, lr}
 8001e64:	681d      	ldr	r5, [r3, #0]
 8001e66:	4606      	mov	r6, r0
 8001e68:	460c      	mov	r4, r1
 8001e6a:	b125      	cbz	r5, 8001e76 <__swsetup_r+0x16>
 8001e6c:	69ab      	ldr	r3, [r5, #24]
 8001e6e:	b913      	cbnz	r3, 8001e76 <__swsetup_r+0x16>
 8001e70:	4628      	mov	r0, r5
 8001e72:	f7ff fb55 	bl	8001520 <__sinit>
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <__swsetup_r+0xd0>)
 8001e78:	429c      	cmp	r4, r3
 8001e7a:	d10f      	bne.n	8001e9c <__swsetup_r+0x3c>
 8001e7c:	686c      	ldr	r4, [r5, #4]
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e84:	0719      	lsls	r1, r3, #28
 8001e86:	d42c      	bmi.n	8001ee2 <__swsetup_r+0x82>
 8001e88:	06dd      	lsls	r5, r3, #27
 8001e8a:	d411      	bmi.n	8001eb0 <__swsetup_r+0x50>
 8001e8c:	2309      	movs	r3, #9
 8001e8e:	6033      	str	r3, [r6, #0]
 8001e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e94:	81a3      	strh	r3, [r4, #12]
 8001e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e9a:	e03e      	b.n	8001f1a <__swsetup_r+0xba>
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <__swsetup_r+0xd4>)
 8001e9e:	429c      	cmp	r4, r3
 8001ea0:	d101      	bne.n	8001ea6 <__swsetup_r+0x46>
 8001ea2:	68ac      	ldr	r4, [r5, #8]
 8001ea4:	e7eb      	b.n	8001e7e <__swsetup_r+0x1e>
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <__swsetup_r+0xd8>)
 8001ea8:	429c      	cmp	r4, r3
 8001eaa:	bf08      	it	eq
 8001eac:	68ec      	ldreq	r4, [r5, #12]
 8001eae:	e7e6      	b.n	8001e7e <__swsetup_r+0x1e>
 8001eb0:	0758      	lsls	r0, r3, #29
 8001eb2:	d512      	bpl.n	8001eda <__swsetup_r+0x7a>
 8001eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eb6:	b141      	cbz	r1, 8001eca <__swsetup_r+0x6a>
 8001eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d002      	beq.n	8001ec6 <__swsetup_r+0x66>
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f000 f98f 	bl	80021e4 <_free_r>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8001eca:	89a3      	ldrh	r3, [r4, #12]
 8001ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ed0:	81a3      	strh	r3, [r4, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6063      	str	r3, [r4, #4]
 8001ed6:	6923      	ldr	r3, [r4, #16]
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	6923      	ldr	r3, [r4, #16]
 8001ee4:	b94b      	cbnz	r3, 8001efa <__swsetup_r+0x9a>
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef0:	d003      	beq.n	8001efa <__swsetup_r+0x9a>
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f000 f929 	bl	800214c <__smakebuf_r>
 8001efa:	89a0      	ldrh	r0, [r4, #12]
 8001efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f00:	f010 0301 	ands.w	r3, r0, #1
 8001f04:	d00a      	beq.n	8001f1c <__swsetup_r+0xbc>
 8001f06:	2300      	movs	r3, #0
 8001f08:	60a3      	str	r3, [r4, #8]
 8001f0a:	6963      	ldr	r3, [r4, #20]
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	61a3      	str	r3, [r4, #24]
 8001f10:	6923      	ldr	r3, [r4, #16]
 8001f12:	b943      	cbnz	r3, 8001f26 <__swsetup_r+0xc6>
 8001f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f18:	d1ba      	bne.n	8001e90 <__swsetup_r+0x30>
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
 8001f1c:	0781      	lsls	r1, r0, #30
 8001f1e:	bf58      	it	pl
 8001f20:	6963      	ldrpl	r3, [r4, #20]
 8001f22:	60a3      	str	r3, [r4, #8]
 8001f24:	e7f4      	b.n	8001f10 <__swsetup_r+0xb0>
 8001f26:	2000      	movs	r0, #0
 8001f28:	e7f7      	b.n	8001f1a <__swsetup_r+0xba>
 8001f2a:	bf00      	nop
 8001f2c:	2000001c 	.word	0x2000001c
 8001f30:	080023bc 	.word	0x080023bc
 8001f34:	080023dc 	.word	0x080023dc
 8001f38:	0800239c 	.word	0x0800239c

08001f3c <_close_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4d06      	ldr	r5, [pc, #24]	; (8001f58 <_close_r+0x1c>)
 8001f40:	2300      	movs	r3, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	602b      	str	r3, [r5, #0]
 8001f48:	f7ff f966 	bl	8001218 <_close>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d102      	bne.n	8001f56 <_close_r+0x1a>
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	b103      	cbz	r3, 8001f56 <_close_r+0x1a>
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
 8001f58:	20000100 	.word	0x20000100

08001f5c <__sflush_r>:
 8001f5c:	898a      	ldrh	r2, [r1, #12]
 8001f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f62:	4605      	mov	r5, r0
 8001f64:	0710      	lsls	r0, r2, #28
 8001f66:	460c      	mov	r4, r1
 8001f68:	d458      	bmi.n	800201c <__sflush_r+0xc0>
 8001f6a:	684b      	ldr	r3, [r1, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	dc05      	bgt.n	8001f7c <__sflush_r+0x20>
 8001f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	dc02      	bgt.n	8001f7c <__sflush_r+0x20>
 8001f76:	2000      	movs	r0, #0
 8001f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f7e:	2e00      	cmp	r6, #0
 8001f80:	d0f9      	beq.n	8001f76 <__sflush_r+0x1a>
 8001f82:	2300      	movs	r3, #0
 8001f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f88:	682f      	ldr	r7, [r5, #0]
 8001f8a:	602b      	str	r3, [r5, #0]
 8001f8c:	d032      	beq.n	8001ff4 <__sflush_r+0x98>
 8001f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	075a      	lsls	r2, r3, #29
 8001f94:	d505      	bpl.n	8001fa2 <__sflush_r+0x46>
 8001f96:	6863      	ldr	r3, [r4, #4]
 8001f98:	1ac0      	subs	r0, r0, r3
 8001f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f9c:	b10b      	cbz	r3, 8001fa2 <__sflush_r+0x46>
 8001f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fa0:	1ac0      	subs	r0, r0, r3
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fa8:	6a21      	ldr	r1, [r4, #32]
 8001faa:	4628      	mov	r0, r5
 8001fac:	47b0      	blx	r6
 8001fae:	1c43      	adds	r3, r0, #1
 8001fb0:	89a3      	ldrh	r3, [r4, #12]
 8001fb2:	d106      	bne.n	8001fc2 <__sflush_r+0x66>
 8001fb4:	6829      	ldr	r1, [r5, #0]
 8001fb6:	291d      	cmp	r1, #29
 8001fb8:	d82c      	bhi.n	8002014 <__sflush_r+0xb8>
 8001fba:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <__sflush_r+0x108>)
 8001fbc:	40ca      	lsrs	r2, r1
 8001fbe:	07d6      	lsls	r6, r2, #31
 8001fc0:	d528      	bpl.n	8002014 <__sflush_r+0xb8>
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6062      	str	r2, [r4, #4]
 8001fc6:	04d9      	lsls	r1, r3, #19
 8001fc8:	6922      	ldr	r2, [r4, #16]
 8001fca:	6022      	str	r2, [r4, #0]
 8001fcc:	d504      	bpl.n	8001fd8 <__sflush_r+0x7c>
 8001fce:	1c42      	adds	r2, r0, #1
 8001fd0:	d101      	bne.n	8001fd6 <__sflush_r+0x7a>
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	b903      	cbnz	r3, 8001fd8 <__sflush_r+0x7c>
 8001fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8001fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fda:	602f      	str	r7, [r5, #0]
 8001fdc:	2900      	cmp	r1, #0
 8001fde:	d0ca      	beq.n	8001f76 <__sflush_r+0x1a>
 8001fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	d002      	beq.n	8001fee <__sflush_r+0x92>
 8001fe8:	4628      	mov	r0, r5
 8001fea:	f000 f8fb 	bl	80021e4 <_free_r>
 8001fee:	2000      	movs	r0, #0
 8001ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8001ff2:	e7c1      	b.n	8001f78 <__sflush_r+0x1c>
 8001ff4:	6a21      	ldr	r1, [r4, #32]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	47b0      	blx	r6
 8001ffc:	1c41      	adds	r1, r0, #1
 8001ffe:	d1c7      	bne.n	8001f90 <__sflush_r+0x34>
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0c4      	beq.n	8001f90 <__sflush_r+0x34>
 8002006:	2b1d      	cmp	r3, #29
 8002008:	d001      	beq.n	800200e <__sflush_r+0xb2>
 800200a:	2b16      	cmp	r3, #22
 800200c:	d101      	bne.n	8002012 <__sflush_r+0xb6>
 800200e:	602f      	str	r7, [r5, #0]
 8002010:	e7b1      	b.n	8001f76 <__sflush_r+0x1a>
 8002012:	89a3      	ldrh	r3, [r4, #12]
 8002014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002018:	81a3      	strh	r3, [r4, #12]
 800201a:	e7ad      	b.n	8001f78 <__sflush_r+0x1c>
 800201c:	690f      	ldr	r7, [r1, #16]
 800201e:	2f00      	cmp	r7, #0
 8002020:	d0a9      	beq.n	8001f76 <__sflush_r+0x1a>
 8002022:	0793      	lsls	r3, r2, #30
 8002024:	680e      	ldr	r6, [r1, #0]
 8002026:	bf08      	it	eq
 8002028:	694b      	ldreq	r3, [r1, #20]
 800202a:	600f      	str	r7, [r1, #0]
 800202c:	bf18      	it	ne
 800202e:	2300      	movne	r3, #0
 8002030:	eba6 0807 	sub.w	r8, r6, r7
 8002034:	608b      	str	r3, [r1, #8]
 8002036:	f1b8 0f00 	cmp.w	r8, #0
 800203a:	dd9c      	ble.n	8001f76 <__sflush_r+0x1a>
 800203c:	6a21      	ldr	r1, [r4, #32]
 800203e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002040:	4643      	mov	r3, r8
 8002042:	463a      	mov	r2, r7
 8002044:	4628      	mov	r0, r5
 8002046:	47b0      	blx	r6
 8002048:	2800      	cmp	r0, #0
 800204a:	dc06      	bgt.n	800205a <__sflush_r+0xfe>
 800204c:	89a3      	ldrh	r3, [r4, #12]
 800204e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002052:	81a3      	strh	r3, [r4, #12]
 8002054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002058:	e78e      	b.n	8001f78 <__sflush_r+0x1c>
 800205a:	4407      	add	r7, r0
 800205c:	eba8 0800 	sub.w	r8, r8, r0
 8002060:	e7e9      	b.n	8002036 <__sflush_r+0xda>
 8002062:	bf00      	nop
 8002064:	20400001 	.word	0x20400001

08002068 <_fflush_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	690b      	ldr	r3, [r1, #16]
 800206c:	4605      	mov	r5, r0
 800206e:	460c      	mov	r4, r1
 8002070:	b913      	cbnz	r3, 8002078 <_fflush_r+0x10>
 8002072:	2500      	movs	r5, #0
 8002074:	4628      	mov	r0, r5
 8002076:	bd38      	pop	{r3, r4, r5, pc}
 8002078:	b118      	cbz	r0, 8002082 <_fflush_r+0x1a>
 800207a:	6983      	ldr	r3, [r0, #24]
 800207c:	b90b      	cbnz	r3, 8002082 <_fflush_r+0x1a>
 800207e:	f7ff fa4f 	bl	8001520 <__sinit>
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <_fflush_r+0x6c>)
 8002084:	429c      	cmp	r4, r3
 8002086:	d11b      	bne.n	80020c0 <_fflush_r+0x58>
 8002088:	686c      	ldr	r4, [r5, #4]
 800208a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0ef      	beq.n	8002072 <_fflush_r+0xa>
 8002092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002094:	07d0      	lsls	r0, r2, #31
 8002096:	d404      	bmi.n	80020a2 <_fflush_r+0x3a>
 8002098:	0599      	lsls	r1, r3, #22
 800209a:	d402      	bmi.n	80020a2 <_fflush_r+0x3a>
 800209c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800209e:	f7ff fadd 	bl	800165c <__retarget_lock_acquire_recursive>
 80020a2:	4628      	mov	r0, r5
 80020a4:	4621      	mov	r1, r4
 80020a6:	f7ff ff59 	bl	8001f5c <__sflush_r>
 80020aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020ac:	07da      	lsls	r2, r3, #31
 80020ae:	4605      	mov	r5, r0
 80020b0:	d4e0      	bmi.n	8002074 <_fflush_r+0xc>
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	059b      	lsls	r3, r3, #22
 80020b6:	d4dd      	bmi.n	8002074 <_fflush_r+0xc>
 80020b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020ba:	f7ff fad0 	bl	800165e <__retarget_lock_release_recursive>
 80020be:	e7d9      	b.n	8002074 <_fflush_r+0xc>
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <_fflush_r+0x70>)
 80020c2:	429c      	cmp	r4, r3
 80020c4:	d101      	bne.n	80020ca <_fflush_r+0x62>
 80020c6:	68ac      	ldr	r4, [r5, #8]
 80020c8:	e7df      	b.n	800208a <_fflush_r+0x22>
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <_fflush_r+0x74>)
 80020cc:	429c      	cmp	r4, r3
 80020ce:	bf08      	it	eq
 80020d0:	68ec      	ldreq	r4, [r5, #12]
 80020d2:	e7da      	b.n	800208a <_fflush_r+0x22>
 80020d4:	080023bc 	.word	0x080023bc
 80020d8:	080023dc 	.word	0x080023dc
 80020dc:	0800239c 	.word	0x0800239c

080020e0 <_lseek_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4d07      	ldr	r5, [pc, #28]	; (8002100 <_lseek_r+0x20>)
 80020e4:	4604      	mov	r4, r0
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	2200      	movs	r2, #0
 80020ec:	602a      	str	r2, [r5, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7ff f89c 	bl	800122c <_lseek>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_lseek_r+0x1e>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_lseek_r+0x1e>
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	20000100 	.word	0x20000100

08002104 <__swhatbuf_r>:
 8002104:	b570      	push	{r4, r5, r6, lr}
 8002106:	460e      	mov	r6, r1
 8002108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800210c:	2900      	cmp	r1, #0
 800210e:	b096      	sub	sp, #88	; 0x58
 8002110:	4614      	mov	r4, r2
 8002112:	461d      	mov	r5, r3
 8002114:	da07      	bge.n	8002126 <__swhatbuf_r+0x22>
 8002116:	2300      	movs	r3, #0
 8002118:	602b      	str	r3, [r5, #0]
 800211a:	89b3      	ldrh	r3, [r6, #12]
 800211c:	061a      	lsls	r2, r3, #24
 800211e:	d410      	bmi.n	8002142 <__swhatbuf_r+0x3e>
 8002120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002124:	e00e      	b.n	8002144 <__swhatbuf_r+0x40>
 8002126:	466a      	mov	r2, sp
 8002128:	f000 f8be 	bl	80022a8 <_fstat_r>
 800212c:	2800      	cmp	r0, #0
 800212e:	dbf2      	blt.n	8002116 <__swhatbuf_r+0x12>
 8002130:	9a01      	ldr	r2, [sp, #4]
 8002132:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002136:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800213a:	425a      	negs	r2, r3
 800213c:	415a      	adcs	r2, r3
 800213e:	602a      	str	r2, [r5, #0]
 8002140:	e7ee      	b.n	8002120 <__swhatbuf_r+0x1c>
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	2000      	movs	r0, #0
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	b016      	add	sp, #88	; 0x58
 800214a:	bd70      	pop	{r4, r5, r6, pc}

0800214c <__smakebuf_r>:
 800214c:	898b      	ldrh	r3, [r1, #12]
 800214e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002150:	079d      	lsls	r5, r3, #30
 8002152:	4606      	mov	r6, r0
 8002154:	460c      	mov	r4, r1
 8002156:	d507      	bpl.n	8002168 <__smakebuf_r+0x1c>
 8002158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800215c:	6023      	str	r3, [r4, #0]
 800215e:	6123      	str	r3, [r4, #16]
 8002160:	2301      	movs	r3, #1
 8002162:	6163      	str	r3, [r4, #20]
 8002164:	b002      	add	sp, #8
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	ab01      	add	r3, sp, #4
 800216a:	466a      	mov	r2, sp
 800216c:	f7ff ffca 	bl	8002104 <__swhatbuf_r>
 8002170:	9900      	ldr	r1, [sp, #0]
 8002172:	4605      	mov	r5, r0
 8002174:	4630      	mov	r0, r6
 8002176:	f7ff fa73 	bl	8001660 <_malloc_r>
 800217a:	b948      	cbnz	r0, 8002190 <__smakebuf_r+0x44>
 800217c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002180:	059a      	lsls	r2, r3, #22
 8002182:	d4ef      	bmi.n	8002164 <__smakebuf_r+0x18>
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	81a3      	strh	r3, [r4, #12]
 800218e:	e7e3      	b.n	8002158 <__smakebuf_r+0xc>
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <__smakebuf_r+0x7c>)
 8002192:	62b3      	str	r3, [r6, #40]	; 0x28
 8002194:	89a3      	ldrh	r3, [r4, #12]
 8002196:	6020      	str	r0, [r4, #0]
 8002198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800219c:	81a3      	strh	r3, [r4, #12]
 800219e:	9b00      	ldr	r3, [sp, #0]
 80021a0:	6163      	str	r3, [r4, #20]
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	6120      	str	r0, [r4, #16]
 80021a6:	b15b      	cbz	r3, 80021c0 <__smakebuf_r+0x74>
 80021a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021ac:	4630      	mov	r0, r6
 80021ae:	f000 f88d 	bl	80022cc <_isatty_r>
 80021b2:	b128      	cbz	r0, 80021c0 <__smakebuf_r+0x74>
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	81a3      	strh	r3, [r4, #12]
 80021c0:	89a0      	ldrh	r0, [r4, #12]
 80021c2:	4305      	orrs	r5, r0
 80021c4:	81a5      	strh	r5, [r4, #12]
 80021c6:	e7cd      	b.n	8002164 <__smakebuf_r+0x18>
 80021c8:	080014b9 	.word	0x080014b9

080021cc <__malloc_lock>:
 80021cc:	4801      	ldr	r0, [pc, #4]	; (80021d4 <__malloc_lock+0x8>)
 80021ce:	f7ff ba45 	b.w	800165c <__retarget_lock_acquire_recursive>
 80021d2:	bf00      	nop
 80021d4:	200000f8 	.word	0x200000f8

080021d8 <__malloc_unlock>:
 80021d8:	4801      	ldr	r0, [pc, #4]	; (80021e0 <__malloc_unlock+0x8>)
 80021da:	f7ff ba40 	b.w	800165e <__retarget_lock_release_recursive>
 80021de:	bf00      	nop
 80021e0:	200000f8 	.word	0x200000f8

080021e4 <_free_r>:
 80021e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021e6:	2900      	cmp	r1, #0
 80021e8:	d048      	beq.n	800227c <_free_r+0x98>
 80021ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ee:	9001      	str	r0, [sp, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f1a1 0404 	sub.w	r4, r1, #4
 80021f6:	bfb8      	it	lt
 80021f8:	18e4      	addlt	r4, r4, r3
 80021fa:	f7ff ffe7 	bl	80021cc <__malloc_lock>
 80021fe:	4a20      	ldr	r2, [pc, #128]	; (8002280 <_free_r+0x9c>)
 8002200:	9801      	ldr	r0, [sp, #4]
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	4615      	mov	r5, r2
 8002206:	b933      	cbnz	r3, 8002216 <_free_r+0x32>
 8002208:	6063      	str	r3, [r4, #4]
 800220a:	6014      	str	r4, [r2, #0]
 800220c:	b003      	add	sp, #12
 800220e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002212:	f7ff bfe1 	b.w	80021d8 <__malloc_unlock>
 8002216:	42a3      	cmp	r3, r4
 8002218:	d90b      	bls.n	8002232 <_free_r+0x4e>
 800221a:	6821      	ldr	r1, [r4, #0]
 800221c:	1862      	adds	r2, r4, r1
 800221e:	4293      	cmp	r3, r2
 8002220:	bf04      	itt	eq
 8002222:	681a      	ldreq	r2, [r3, #0]
 8002224:	685b      	ldreq	r3, [r3, #4]
 8002226:	6063      	str	r3, [r4, #4]
 8002228:	bf04      	itt	eq
 800222a:	1852      	addeq	r2, r2, r1
 800222c:	6022      	streq	r2, [r4, #0]
 800222e:	602c      	str	r4, [r5, #0]
 8002230:	e7ec      	b.n	800220c <_free_r+0x28>
 8002232:	461a      	mov	r2, r3
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	b10b      	cbz	r3, 800223c <_free_r+0x58>
 8002238:	42a3      	cmp	r3, r4
 800223a:	d9fa      	bls.n	8002232 <_free_r+0x4e>
 800223c:	6811      	ldr	r1, [r2, #0]
 800223e:	1855      	adds	r5, r2, r1
 8002240:	42a5      	cmp	r5, r4
 8002242:	d10b      	bne.n	800225c <_free_r+0x78>
 8002244:	6824      	ldr	r4, [r4, #0]
 8002246:	4421      	add	r1, r4
 8002248:	1854      	adds	r4, r2, r1
 800224a:	42a3      	cmp	r3, r4
 800224c:	6011      	str	r1, [r2, #0]
 800224e:	d1dd      	bne.n	800220c <_free_r+0x28>
 8002250:	681c      	ldr	r4, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	6053      	str	r3, [r2, #4]
 8002256:	4421      	add	r1, r4
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	e7d7      	b.n	800220c <_free_r+0x28>
 800225c:	d902      	bls.n	8002264 <_free_r+0x80>
 800225e:	230c      	movs	r3, #12
 8002260:	6003      	str	r3, [r0, #0]
 8002262:	e7d3      	b.n	800220c <_free_r+0x28>
 8002264:	6825      	ldr	r5, [r4, #0]
 8002266:	1961      	adds	r1, r4, r5
 8002268:	428b      	cmp	r3, r1
 800226a:	bf04      	itt	eq
 800226c:	6819      	ldreq	r1, [r3, #0]
 800226e:	685b      	ldreq	r3, [r3, #4]
 8002270:	6063      	str	r3, [r4, #4]
 8002272:	bf04      	itt	eq
 8002274:	1949      	addeq	r1, r1, r5
 8002276:	6021      	streq	r1, [r4, #0]
 8002278:	6054      	str	r4, [r2, #4]
 800227a:	e7c7      	b.n	800220c <_free_r+0x28>
 800227c:	b003      	add	sp, #12
 800227e:	bd30      	pop	{r4, r5, pc}
 8002280:	200000a4 	.word	0x200000a4

08002284 <_read_r>:
 8002284:	b538      	push	{r3, r4, r5, lr}
 8002286:	4d07      	ldr	r5, [pc, #28]	; (80022a4 <_read_r+0x20>)
 8002288:	4604      	mov	r4, r0
 800228a:	4608      	mov	r0, r1
 800228c:	4611      	mov	r1, r2
 800228e:	2200      	movs	r2, #0
 8002290:	602a      	str	r2, [r5, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	f7fe ff8b 	bl	80011ae <_read>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	d102      	bne.n	80022a2 <_read_r+0x1e>
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	b103      	cbz	r3, 80022a2 <_read_r+0x1e>
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	20000100 	.word	0x20000100

080022a8 <_fstat_r>:
 80022a8:	b538      	push	{r3, r4, r5, lr}
 80022aa:	4d07      	ldr	r5, [pc, #28]	; (80022c8 <_fstat_r+0x20>)
 80022ac:	2300      	movs	r3, #0
 80022ae:	4604      	mov	r4, r0
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	602b      	str	r3, [r5, #0]
 80022b6:	f7fe ffb2 	bl	800121e <_fstat>
 80022ba:	1c43      	adds	r3, r0, #1
 80022bc:	d102      	bne.n	80022c4 <_fstat_r+0x1c>
 80022be:	682b      	ldr	r3, [r5, #0]
 80022c0:	b103      	cbz	r3, 80022c4 <_fstat_r+0x1c>
 80022c2:	6023      	str	r3, [r4, #0]
 80022c4:	bd38      	pop	{r3, r4, r5, pc}
 80022c6:	bf00      	nop
 80022c8:	20000100 	.word	0x20000100

080022cc <_isatty_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4d06      	ldr	r5, [pc, #24]	; (80022e8 <_isatty_r+0x1c>)
 80022d0:	2300      	movs	r3, #0
 80022d2:	4604      	mov	r4, r0
 80022d4:	4608      	mov	r0, r1
 80022d6:	602b      	str	r3, [r5, #0]
 80022d8:	f7fe ffa6 	bl	8001228 <_isatty>
 80022dc:	1c43      	adds	r3, r0, #1
 80022de:	d102      	bne.n	80022e6 <_isatty_r+0x1a>
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	b103      	cbz	r3, 80022e6 <_isatty_r+0x1a>
 80022e4:	6023      	str	r3, [r4, #0]
 80022e6:	bd38      	pop	{r3, r4, r5, pc}
 80022e8:	20000100 	.word	0x20000100

080022ec <_init>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr

080022f8 <_fini>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr
